     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                	mov ax, data
     4 00000003 8ED8                    	mov ds, ax
     5 00000005 B8[0000]                	mov ax, stack
     6 00000008 8ED0                    	mov ss,	ax
     7 0000000A BC[0001]                	mov sp, stacktop
     8                                  
     9                                  					;abre arquivo
    10 0000000D B43D                    	mov ah, 3Dh
    11 0000000F B000                    	mov al, 00
    12 00000011 BA[0000]                	mov dx, filename
    13 00000014 B90100                  	mov cx, 1
    14 00000017 CD21                    	int 21h	
    15                                  
    16 00000019 A3[0C00]                	mov word[handle], ax
    17 0000001C BB[1204]                	mov bx, image
    18 0000001F 891E[0E00]              	mov word[pointer], bx
    19                                  
    20                                  read:
    21 00000023 B43F                     	mov ah, 3Fh
    22 00000025 8B1E[0C00]              	mov bx, word[handle]
    23 00000029 B90100                  	mov cx, 1
    24 0000002C BA[0B00]                	mov dx, input
    25 0000002F CD21                    	int 21h
    26                                  
    27                                  					;verifica se o arquivo acabou	
    28 00000031 39C8                    	cmp ax, cx
    29 00000033 7C3A                    	jl finishread
    30                                  
    31                                  					;compara com o espa√ßo
    32 00000035 8A16[0B00]              	mov dl, byte[input]
    33 00000039 80FA20                  	cmp dl, 20h
    34 0000003C 7417                    	je store
    35                                  
    36 0000003E 80FA30                  	cmp dl, '0'
    37 00000041 7CE0                    	jl read
    38                                  
    39 00000043 A0[0A00]                	mov al, byte[buffer]
    40 00000046 80EA30                  	sub dl, '0'
    41 00000049 B30A                    	mov bl, 0ah
    42 0000004B F6E3                    	mul bl
    43 0000004D 00D0                    	add al, dl
    44 0000004F A2[0A00]                	mov byte[buffer], al
    45 00000052 E9CEFF                  	jmp read
    46                                  
    47                                  store:
    48 00000055 8B1E[0E00]              	mov bx, word[pointer]
    49 00000059 8A16[0A00]              	mov dl, byte[buffer]
    50 0000005D 8817                    	mov byte[bx], dl
    51 0000005F 891E[0E00]              	mov [pointer], bx
    52 00000063 FF06[0E00]              	inc word[pointer]
    53 00000067 C606[0A00]00            	mov byte[buffer], 00h
    54 0000006C E9B4FF                  	jmp read
    55                                  
    56                                  finishread: 				; termina a leitura da imagem
    57 0000006F 8B1E[0E00]              	mov bx, [pointer]
    58 00000073 8A16[0A00]              	mov dl, [buffer]
    59 00000077 8817                    	mov byte[bx], dl
    60 00000079 891E[0E00]              	mov [pointer], bx
    61 0000007D FF06[0E00]              	inc word[pointer]
    62 00000081 C606[0A00]00            	mov byte[buffer], 00h
    63 00000086 E90000                  	jmp print	
    64                                  
    65                                  print:					;imprime a imagem na tela
    66 00000089 8B1E[0E00]              	mov bx, word[pointer]
    67 0000008D C60724                  	mov byte[bx], '$'
    68 00000090 891E[0E00]              	mov word[pointer], bx
    69 00000094 BA[1204]                	mov dx, image
    70 00000097 B409                    	mov ah, 09h
    71 00000099 CD21                    	int 21h
    72 0000009B E90000                  	jmp cphist
    73                                  
    74                                  cphist: 				; computa histograma
    75 0000009E BB[1204]                	mov bx, image
    76 000000A1 B90100                  	mov cx, 1
    77                                  prox:
    78 000000A4 B400                    	mov ah, 00h
    79 000000A6 8A07                    	mov al, byte[bx] 
    80 000000A8 89C6                    	mov si, ax
    81 000000AA 01F6                    	add si, si
    82 000000AC 8184[1000]0100          	add word[histogram+si], 1
    83 000000B2 81C30100                	add bx, 1 			;anda na imagem
    84 000000B6 E2EC                    	loop prox
    85                                  
    86                                  printh: 				;imprime histograma obtido
    87 000000B8 BA[1000]                	mov dx, histogram
    88 000000BB B409                    	mov ah, 09h
    89 000000BD CD21                    	int 21h
    90 000000BF CD03                    	int 3
    91                                  
    92                                  equalize:
    93 000000C1 BE[1000]                	mov si, histogram
    94 000000C4 BF[1102]                	mov di, eqhistogram
    95 000000C7 8B04                    	mov ax, [si]
    96 000000C9 8905                    	mov [di], ax
    97 000000CB 81C60200                	add si, 2
    98 000000CF B9FF00                  	mov cx, 255
    99                                  .iter:
   100 000000D2 8B04                    	mov ax, [si]
   101 000000D4 014502                  	add [di+2], ax
   102 000000D7 8B05                    	mov ax, [di]
   103 000000D9 014502                  	add [di+2], ax
   104 000000DC 81C70200                	add di, 2
   105 000000E0 E2F0                    	loop .iter
   106                                  
   107                                  exit:
   108 000000E2 B44C                    	mov ah, 4Ch
   109 000000E4 CD21                    	int 21h
   110                                  
   111                                  segment data
   112 00000000 74657374652E747874-     filename	db	'teste.txt', 0
   113 00000009 00                 
   114 0000000A 00                      buffer		db	0
   115 0000000B 00                      input		db	0
   116 0000000C 0000                    handle		dw 	0
   117 0000000E 0100                    pointer		dw 	1
   118 00000010 0000<rept>              histogram:	times	256 dw 0000h
   119 00000210 24                      fim1		db	'$'
   120 00000211 0000<rept>              eqhistogram:	times	256 dw 0000h
   121 00000411 24                      fim2		db	'$'
   122 00000412 <res 00000001>          image:		resb  	1
   123                                  
   124                                  segment stack stack
   125 00000000 <res 00000100>          	resb 256
   126                                  stacktop:
   127                                  

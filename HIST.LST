     1                                  ; Rodolfo Vieira Valentim
     2                                  ; Sistemas Embarcados 2016/1
     3                                  
     4                                  %macro drawline 5 		;x1,y1,x2,y2,color
     5                                  	mov	ax,%1
     6                                  	push	ax
     7                                  	mov	ax,%2
     8                                  	push	ax
     9                                  	mov	ax,%3
    10                                  	push	ax
    11                                  	mov	ax,%4
    12                                  	push	ax
    13                                  	mov	byte[cor],%5
    14                                  	call	line
    15                                  %endmacro
    16                                  
    17                                  %macro ponto 2			; x,y,color
    18                                  	add %1, 3
    19                                  	add %2, 100
    20                                  	push %1
    21                                  	push %2	
    22                                  	call plot_xy
    23                                  	sub %1, 3
    24                                  	sub %2, 100
    25                                  %endmacro
    26                                  
    27                                  %macro writeword 3
    28                                      	mov     bx,0
    29                                      	mov     dh,%2			;linha 0-29
    30                                      	mov     dl,%3			;coluna 0-79
    31                                  %%local:
    32                                  	call	cursor
    33                                      	mov     al,[bx+%1]
    34                                  	cmp	al, '$'
    35                                  	je	%%exit
    36                                  	call	caracter
    37                                      	inc     bx			;proximo caracter
    38                                  	inc	dl			;avanca a coluna
    39                                      	jmp	%%local
    40                                  %%exit:
    41                                  %endmacro
    42                                  
    43                                  ;*******************************************************************
    44                                  
    45                                  segment code
    46                                  ..start:
    47 00000000 B8[0000]                    	mov ax,data
    48 00000003 8ED8                        	mov ds,ax
    49 00000005 B8[0000]                    	mov ax,stack
    50 00000008 8ED0                        	mov ss,ax
    51 0000000A BC[0001]                    	mov sp,stacktop
    52                                  
    53                                  ;*******************************************************************
    54                                  
    55                                  	;abre arquivo
    56 0000000D B43D                    	mov ah, 3Dh
    57 0000000F B000                    	mov al, 00
    58 00000011 BA[7700]                	mov dx, filename
    59 00000014 B90100                  	mov cx, 1
    60 00000017 CD21                    	int 21h	
    61                                  
    62 00000019 A3[8200]                	mov word[handle], ax
    63 0000001C BE[8504]                	mov si, image
    64                                  
    65                                  read:
    66 0000001F B43F                     	mov ah, 3Fh
    67 00000021 8B1E[8200]              	mov bx, word[handle]
    68 00000025 B90100                  	mov cx, 1
    69 00000028 BA[8400]                	mov dx, input
    70 0000002B CD21                    	int 21h
    71                                  
    72                                  	;verifica se o arquivo acabou	
    73 0000002D 39C8                    	cmp ax, cx
    74 0000002F 7C2A                    	jl finishread
    75                                  	
    76                                  	;compara com o espaço
    77 00000031 8A16[8400]              	mov dl, byte[input]
    78 00000035 80FA20                  	cmp dl, 20h
    79 00000038 7412                    	je store
    80                                  
    81                                  	;cmp dl, '0'
    82                                  	;jl finishread
    83                                  
    84 0000003A A0[8100]                	mov al, byte[buffer]
    85 0000003D 80EA30                  	sub dl, '0'
    86 00000040 B30A                    	mov bl, 0ah
    87 00000042 F6E3                    	mul bl
    88 00000044 00D0                    	add al, dl
    89 00000046 A2[8100]                	mov byte[buffer], al
    90 00000049 E9D3FF                  	jmp read
    91                                  	
    92                                  store:
    93 0000004C 8A16[8100]              	mov dl, byte[buffer]
    94 00000050 8814                    	mov byte[si], dl
    95 00000052 46                      	inc si
    96 00000053 C606[8100]00            	mov byte[buffer], 00h
    97 00000058 E9C4FF                  	jmp read
    98                                  
    99                                  finishread:
   100                                  	; termina a leitura da imagem
   101 0000005B 8A16[8100]              	mov dl, [buffer]	
   102 0000005F 8814                    	mov byte[si], dl
   103                                  
   104                                  ;*******************************************************************
   105                                  
   106                                  doHistogram:
   107 00000061 BE[8504]                	mov si, image
   108 00000064 BF[8500]                	mov di, histogram
   109 00000067 B925F4                  	mov cx, 62501
   110                                  L2:
   111 0000006A 8A1C                    	mov bl, byte[si]
   112 0000006C 01DB                    	add bx, bx
   113 0000006E 81010100                	add word[di+bx], 0001h
   114 00000072 46                      	inc si
   115 00000073 E2F5                    	loop L2
   116                                  
   117                                  ;*******************************************************************
   118                                  
   119                                  acumulate:
   120 00000075 BE[8500]                	mov si, histogram
   121 00000078 BF[8502]                	mov di, cfd
   122                                  	
   123 0000007B 8B1C                    	mov bx, [si]
   124 0000007D 891D                    	mov [di], bx
   125 0000007F 81C60200                	add si, 2
   126 00000083 B9FF00                  	mov cx, 255
   127                                  L4:
   128 00000086 8B1C                    	mov bx, [si]
   129 00000088 015D02                  	add [di+2], bx
   130 0000008B 8B1D                    	mov bx, [di]
   131 0000008D 015D02                  	add [di+2], bx
   132 00000090 81C70200                	add di, 2
   133 00000094 81C60200                	add si, 2
   134 00000098 E2EC                    	loop L4
   135                                  
   136                                  equalize:
   137                                  	;mov di, image
   138                                  	;mov cx, 62500
   139                                  	;mov bx, 62500
   140                                  	
   141                                  	;int 3
   142                                  	;or ax, ax
   143                                  	
   144                                  L7:
   145                                  	;mov al, byte[di]
   146                                  	;and ax, 00FFh
   147                                  	;mov si, ax
   148                                  	;add si, si
   149                                  	;mov ax, [cfd+si]
   150                                  	;div bx
   151                                  	;shr ax, 8
   152                                  	;mov [di], al
   153                                  	;inc di
   154                                  	;loop L7
   155                                  
   156                                  ; salvar modo corrente de video(vendo como esta o modo de video da maquina)
   157 0000009A B40F                            mov 	ah,0Fh
   158 0000009C CD10                        	int 	10h
   159 0000009E A2[0100]                    	mov 	[modo_anterior],al   
   160                                  
   161                                  ; alterar modo de video para gráfico 640x480 16 cores
   162 000000A1 B012                        	mov    	al,12h
   163 000000A3 B400                       	mov    	ah,0
   164 000000A5 CD10                        	int    	10h
   165                                  	
   166                                  ;escrever uma mensagem
   167                                  
   168                                  	drawline 255, 0, 255, 479, branco_intenso
   169 000000A7 B8FF00              <1> 	mov	ax,%1
   170 000000AA 50                  <1> 	push	ax
   171 000000AB B80000              <1> 	mov	ax,%2
   172 000000AE 50                  <1> 	push	ax
   173 000000AF B8FF00              <1> 	mov	ax,%3
   174 000000B2 50                  <1> 	push	ax
   175 000000B3 B8DF01              <1> 	mov	ax,%4
   176 000000B6 50                  <1> 	push	ax
   177 000000B7 C606[0000]0F        <1> 	mov	byte[cor],%5
   178 000000BC E81804              <1> 	call	line
   179                                  	drawline 255, 239, 639, 239, branco_intenso
   180 000000BF B8FF00              <1> 	mov	ax,%1
   181 000000C2 50                  <1> 	push	ax
   182 000000C3 B8EF00              <1> 	mov	ax,%2
   183 000000C6 50                  <1> 	push	ax
   184 000000C7 B87F02              <1> 	mov	ax,%3
   185 000000CA 50                  <1> 	push	ax
   186 000000CB B8EF00              <1> 	mov	ax,%4
   187 000000CE 50                  <1> 	push	ax
   188 000000CF C606[0000]0F        <1> 	mov	byte[cor],%5
   189 000000D4 E80004              <1> 	call	line
   190                                  	drawline 63, 479, 63, 431, branco_intenso
   191 000000D7 B83F00              <1> 	mov	ax,%1
   192 000000DA 50                  <1> 	push	ax
   193 000000DB B8DF01              <1> 	mov	ax,%2
   194 000000DE 50                  <1> 	push	ax
   195 000000DF B83F00              <1> 	mov	ax,%3
   196 000000E2 50                  <1> 	push	ax
   197 000000E3 B8AF01              <1> 	mov	ax,%4
   198 000000E6 50                  <1> 	push	ax
   199 000000E7 C606[0000]0F        <1> 	mov	byte[cor],%5
   200 000000EC E8E803              <1> 	call	line
   201                                  	drawline 127, 479, 127, 431, branco_intenso
   202 000000EF B87F00              <1> 	mov	ax,%1
   203 000000F2 50                  <1> 	push	ax
   204 000000F3 B8DF01              <1> 	mov	ax,%2
   205 000000F6 50                  <1> 	push	ax
   206 000000F7 B87F00              <1> 	mov	ax,%3
   207 000000FA 50                  <1> 	push	ax
   208 000000FB B8AF01              <1> 	mov	ax,%4
   209 000000FE 50                  <1> 	push	ax
   210 000000FF C606[0000]0F        <1> 	mov	byte[cor],%5
   211 00000104 E8D003              <1> 	call	line
   212                                  	drawline 191, 479, 191, 431, branco_intenso
   213 00000107 B8BF00              <1> 	mov	ax,%1
   214 0000010A 50                  <1> 	push	ax
   215 0000010B B8DF01              <1> 	mov	ax,%2
   216 0000010E 50                  <1> 	push	ax
   217 0000010F B8BF00              <1> 	mov	ax,%3
   218 00000112 50                  <1> 	push	ax
   219 00000113 B8AF01              <1> 	mov	ax,%4
   220 00000116 50                  <1> 	push	ax
   221 00000117 C606[0000]0F        <1> 	mov	byte[cor],%5
   222 0000011C E8B803              <1> 	call	line
   223                                  	drawline 0, 431, 255, 431, branco_intenso
   224 0000011F B80000              <1> 	mov	ax,%1
   225 00000122 50                  <1> 	push	ax
   226 00000123 B8AF01              <1> 	mov	ax,%2
   227 00000126 50                  <1> 	push	ax
   228 00000127 B8FF00              <1> 	mov	ax,%3
   229 0000012A 50                  <1> 	push	ax
   230 0000012B B8AF01              <1> 	mov	ax,%4
   231 0000012E 50                  <1> 	push	ax
   232 0000012F C606[0000]0F        <1> 	mov	byte[cor],%5
   233 00000134 E8A003              <1> 	call	line
   234                                  	drawline 0, 63, 255, 63, branco_intenso
   235 00000137 B80000              <1> 	mov	ax,%1
   236 0000013A 50                  <1> 	push	ax
   237 0000013B B83F00              <1> 	mov	ax,%2
   238 0000013E 50                  <1> 	push	ax
   239 0000013F B8FF00              <1> 	mov	ax,%3
   240 00000142 50                  <1> 	push	ax
   241 00000143 B83F00              <1> 	mov	ax,%4
   242 00000146 50                  <1> 	push	ax
   243 00000147 C606[0000]0F        <1> 	mov	byte[cor],%5
   244 0000014C E88803              <1> 	call	line
   245                                  
   246                                  	writeword abrir, 1, 1
   247 0000014F BB0000              <1>     	mov     bx,0
   248 00000152 B601                <1>     	mov     dh,%2
   249 00000154 B201                <1>     	mov     dl,%3
   250                              <1> %%local:
   251 00000156 E88701              <1> 	call	cursor
   252 00000159 8A87[0A00]          <1>     	mov     al,[bx+%1]
   253 0000015D 3C24                <1> 	cmp	al, '$'
   254 0000015F 7409                <1> 	je	%%exit
   255 00000161 E89301              <1> 	call	caracter
   256 00000164 43                  <1>     	inc     bx
   257 00000165 FEC2                <1> 	inc	dl
   258 00000167 E9ECFF              <1>     	jmp	%%local
   259                              <1> %%exit:
   260                                  	writeword sair, 1, 10
   261 0000016A BB0000              <1>     	mov     bx,0
   262 0000016D B601                <1>     	mov     dh,%2
   263 0000016F B20A                <1>     	mov     dl,%3
   264                              <1> %%local:
   265 00000171 E86C01              <1> 	call	cursor
   266 00000174 8A87[1000]          <1>     	mov     al,[bx+%1]
   267 00000178 3C24                <1> 	cmp	al, '$'
   268 0000017A 7409                <1> 	je	%%exit
   269 0000017C E87801              <1> 	call	caracter
   270 0000017F 43                  <1>     	inc     bx
   271 00000180 FEC2                <1> 	inc	dl
   272 00000182 E9ECFF              <1>     	jmp	%%local
   273                              <1> %%exit:
   274                                  	writeword hist, 1, 18
   275 00000185 BB0000              <1>     	mov     bx,0
   276 00000188 B601                <1>     	mov     dh,%2
   277 0000018A B212                <1>     	mov     dl,%3
   278                              <1> %%local:
   279 0000018C E85101              <1> 	call	cursor
   280 0000018F 8A87[1500]          <1>     	mov     al,[bx+%1]
   281 00000193 3C24                <1> 	cmp	al, '$'
   282 00000195 7409                <1> 	je	%%exit
   283 00000197 E85D01              <1> 	call	caracter
   284 0000019A 43                  <1>     	inc     bx
   285 0000019B FEC2                <1> 	inc	dl
   286 0000019D E9ECFF              <1>     	jmp	%%local
   287                              <1> %%exit:
   288                                  	writeword eqhist, 1, 25
   289 000001A0 BB0000              <1>     	mov     bx,0
   290 000001A3 B601                <1>     	mov     dh,%2
   291 000001A5 B219                <1>     	mov     dl,%3
   292                              <1> %%local:
   293 000001A7 E83601              <1> 	call	cursor
   294 000001AA 8A87[1A00]          <1>     	mov     al,[bx+%1]
   295 000001AE 3C24                <1> 	cmp	al, '$'
   296 000001B0 7409                <1> 	je	%%exit
   297 000001B2 E84201              <1> 	call	caracter
   298 000001B5 43                  <1>     	inc     bx
   299 000001B6 FEC2                <1> 	inc	dl
   300 000001B8 E9ECFF              <1>     	jmp	%%local
   301                              <1> %%exit:
   302                                  	writeword txhist, 1, 33
   303 000001BB BB0000              <1>     	mov     bx,0
   304 000001BE B601                <1>     	mov     dh,%2
   305 000001C0 B221                <1>     	mov     dl,%3
   306                              <1> %%local:
   307 000001C2 E81B01              <1> 	call	cursor
   308 000001C5 8A87[3500]          <1>     	mov     al,[bx+%1]
   309 000001C9 3C24                <1> 	cmp	al, '$'
   310 000001CB 7409                <1> 	je	%%exit
   311 000001CD E82701              <1> 	call	caracter
   312 000001D0 43                  <1>     	inc     bx
   313 000001D1 FEC2                <1> 	inc	dl
   314 000001D3 E9ECFF              <1>     	jmp	%%local
   315                              <1> %%exit:
   316                                  	writeword txeqhist, 16, 33
   317 000001D6 BB0000              <1>     	mov     bx,0
   318 000001D9 B610                <1>     	mov     dh,%2
   319 000001DB B221                <1>     	mov     dl,%3
   320                              <1> %%local:
   321 000001DD E80001              <1> 	call	cursor
   322 000001E0 8A87[2100]          <1>     	mov     al,[bx+%1]
   323 000001E4 3C24                <1> 	cmp	al, '$'
   324 000001E6 7409                <1> 	je	%%exit
   325 000001E8 E80C01              <1> 	call	caracter
   326 000001EB 43                  <1>     	inc     bx
   327 000001EC FEC2                <1> 	inc	dl
   328 000001EE E9ECFF              <1>     	jmp	%%local
   329                              <1> %%exit:
   330                                  	writeword nome, 27, 1
   331 000001F1 BB0000              <1>     	mov     bx,0
   332 000001F4 B61B                <1>     	mov     dh,%2
   333 000001F6 B201                <1>     	mov     dl,%3
   334                              <1> %%local:
   335 000001F8 E8E500              <1> 	call	cursor
   336 000001FB 8A87[4B00]          <1>     	mov     al,[bx+%1]
   337 000001FF 3C24                <1> 	cmp	al, '$'
   338 00000201 7409                <1> 	je	%%exit
   339 00000203 E8F100              <1> 	call	caracter
   340 00000206 43                  <1>     	inc     bx
   341 00000207 FEC2                <1> 	inc	dl
   342 00000209 E9ECFF              <1>     	jmp	%%local
   343                              <1> %%exit:
   344                                  	writeword disc, 28, 1
   345 0000020C BB0000              <1>     	mov     bx,0
   346 0000020F B61C                <1>     	mov     dh,%2
   347 00000211 B201                <1>     	mov     dl,%3
   348                              <1> %%local:
   349 00000213 E8CA00              <1> 	call	cursor
   350 00000216 8A87[5C00]          <1>     	mov     al,[bx+%1]
   351 0000021A 3C24                <1> 	cmp	al, '$'
   352 0000021C 7409                <1> 	je	%%exit
   353 0000021E E8D600              <1> 	call	caracter
   354 00000221 43                  <1>     	inc     bx
   355 00000222 FEC2                <1> 	inc	dl
   356 00000224 E9ECFF              <1>     	jmp	%%local
   357                              <1> %%exit:
   358                                  
   359 00000227 BE0000                  	mov si, 0  	; x
   360 0000022A BFF900                  	mov di, 249	; y
   361 0000022D BB[8504]                	mov bx, image
   362                                  	
   363 00000230 81FF0000                L3:	cmp di, 0
   364 00000234 7434                    	je EL3
   365 00000236 B400                    	mov ah, 00h
   366 00000238 8A07                    	mov al, byte[bx]
   367 0000023A C0E804                  	shr al, 4
   368 0000023D A2[0000]                	mov byte[cor], al	
   369                                  	ponto si, di
   370 00000240 81C60300            <1> 	add %1, 3
   371 00000244 81C76400            <1> 	add %2, 100
   372 00000248 56                  <1> 	push %1
   373 00000249 57                  <1> 	push %2
   374 0000024A E8C800              <1> 	call plot_xy
   375 0000024D 81EE0300            <1> 	sub %1, 3
   376 00000251 81EF6400            <1> 	sub %2, 100
   377 00000255 46                      	inc si
   378 00000256 43                      	inc bx	
   379 00000257 81FEFA00                	cmp si, 250
   380 0000025B 7403                    	je RCAX
   381 0000025D E9D0FF                  	jmp L3
   382                                  RCAX:	;reset counter ax
   383 00000260 BE0000                  	mov si, 0
   384 00000263 81EF0100                	sub di, 1
   385 00000267 E9C6FF                  	jmp L3
   386                                  EL3: 	; end of loop 3		
   387                                  
   388                                  	; plot histogram
   389 0000026A B93F01                  	mov cx, 319
   390 0000026D BB[8500]                	mov bx, histogram
   391                                  L5:
   392 00000270 81F94002                	cmp cx, 576
   393 00000274 7426                    	je EL5
   394 00000276 8B17                    	mov dx, word[bx]
   395 00000278 C1EA09                  	shr dx, 9
   396 0000027B 81C21000                	add dx, 16
   397                                  	drawline cx, 16, cx, dx, branco_intenso
   398 0000027F 89C8                <1> 	mov	ax,%1
   399 00000281 50                  <1> 	push	ax
   400 00000282 B81000              <1> 	mov	ax,%2
   401 00000285 50                  <1> 	push	ax
   402 00000286 89C8                <1> 	mov	ax,%3
   403 00000288 50                  <1> 	push	ax
   404 00000289 89D0                <1> 	mov	ax,%4
   405 0000028B 50                  <1> 	push	ax
   406 0000028C C606[0000]0F        <1> 	mov	byte[cor],%5
   407 00000291 E84302              <1> 	call	line
   408 00000294 81C30200                	add bx, 2 
   409 00000298 41                      	inc cx
   410 00000299 E9D4FF                  	jmp L5
   411                                  EL5: 	; end of loop 3	
   412                                  
   413                                  	; plot histogram
   414 0000029C B93F01                  	mov cx, 319
   415 0000029F BB[8502]                	mov bx, cfd
   416                                  L6:
   417 000002A2 81F94002                	cmp cx, 576
   418 000002A6 7426                    	je EL6
   419 000002A8 8B17                    	mov dx, word[bx]
   420 000002AA C1EA09                  	shr dx, 9
   421 000002AD 81C2FA00                	add dx, 250
   422                                  	drawline cx, 250, cx, dx, branco_intenso
   423 000002B1 89C8                <1> 	mov	ax,%1
   424 000002B3 50                  <1> 	push	ax
   425 000002B4 B8FA00              <1> 	mov	ax,%2
   426 000002B7 50                  <1> 	push	ax
   427 000002B8 89C8                <1> 	mov	ax,%3
   428 000002BA 50                  <1> 	push	ax
   429 000002BB 89D0                <1> 	mov	ax,%4
   430 000002BD 50                  <1> 	push	ax
   431 000002BE C606[0000]0F        <1> 	mov	byte[cor],%5
   432 000002C3 E81102              <1> 	call	line
   433 000002C6 81C30200                	add bx, 2 
   434 000002CA 41                      	inc cx
   435 000002CB E9D4FF                  	jmp L6
   436                                  EL6: 	; end of loop 6
   437                                  
   438                                  	; equalize image
   439 000002CE B924F4                  	mov cx, 62500
   440                                  	m
   441                                  		
   442                                  	
   443 000002D1 B408                    	mov ah,08h
   444 000002D3 CD21                    	int 21h
   445 000002D5 B400                    	mov ah,0   			; set video mode
   446 000002D7 A0[0100]                	mov al,[modo_anterior]   	; modo anterior
   447 000002DA CD10                    	int 10h
   448                                  
   449 000002DC B44C                    	mov ah, 4Ch
   450 000002DE CD21                    	int 21h
   451                                  ;***************************************************************************
   452                                  ; função cursor
   453                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   454                                  ;***************************************************************************
   455                                  cursor:
   456 000002E0 9C                      	pushf
   457 000002E1 50                      	push 	ax
   458 000002E2 53                      	push 	bx
   459 000002E3 51                      	push	cx
   460 000002E4 52                      	push	dx
   461 000002E5 56                      	push	si
   462 000002E6 57                      	push	di
   463 000002E7 55                      	push	bp
   464 000002E8 B402                    	mov    	ah,2
   465 000002EA B700                    	mov    	bh,0
   466 000002EC CD10                    	int    	10h
   467 000002EE 5D                      	pop	bp
   468 000002EF 5F                      	pop	di
   469 000002F0 5E                      	pop	si
   470 000002F1 5A                      	pop	dx
   471 000002F2 59                      	pop	cx
   472 000002F3 5B                      	pop	bx
   473 000002F4 58                      	pop	ax
   474 000002F5 9D                      	popf
   475 000002F6 C3                      	ret
   476                                  ;_____________________________________________________________________________
   477                                  ;
   478                                  ;   fun��o caracter escrito na posi��o do cursor
   479                                  ;
   480                                  ; al= caracter a ser escrito
   481                                  ; cor definida na variavel cor
   482                                  caracter:
   483 000002F7 9C                      	pushf
   484 000002F8 50                      	push	ax
   485 000002F9 53                      	push	bx
   486 000002FA 51                      	push	cx
   487 000002FB 52                      	push	dx
   488 000002FC 56                      	push	si
   489 000002FD 57                      	push	di
   490 000002FE 55                      	push	bp
   491 000002FF B409                        	mov    	ah,9
   492 00000301 B700                        	mov    	bh,0
   493 00000303 B90100                      	mov    	cx,1
   494 00000306 8A1E[0000]                 	mov    	bl,[cor]
   495 0000030A CD10                        	int    	10h
   496 0000030C 5D                      	pop	bp
   497 0000030D 5F                      	pop	di
   498 0000030E 5E                      	pop	si
   499 0000030F 5A                      	pop	dx
   500 00000310 59                      	pop	cx
   501 00000311 5B                      	pop	bx
   502 00000312 58                      	pop	ax
   503 00000313 9D                      	popf
   504 00000314 C3                      	ret
   505                                  ;_____________________________________________________________________________
   506                                  ;
   507                                  ;   função plot_xy
   508                                  ;
   509                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   510                                  ; cor definida na variavel cor
   511                                  plot_xy:
   512 00000315 55                      	push	bp
   513 00000316 89E5                    	mov	bp,sp
   514 00000318 9C                      	pushf
   515 00000319 50                      	push 	ax
   516 0000031A 53                      	push 	bx
   517 0000031B 51                      	push	cx
   518 0000031C 52                      	push	dx
   519 0000031D 56                      	push	si
   520 0000031E 57                      	push	di
   521 0000031F B40C                    	mov    	ah,0ch
   522 00000321 A0[0000]                	mov    	al,[cor]
   523 00000324 B700                    	mov    	bh,0
   524 00000326 BADF01                  	mov    	dx,479
   525 00000329 2B5604                  	sub	dx,[bp+4]
   526 0000032C 8B4E06                  	mov    	cx,[bp+6]
   527 0000032F CD10                    	int    	10h
   528 00000331 5F                      	pop	di
   529 00000332 5E                      	pop	si
   530 00000333 5A                      	pop	dx
   531 00000334 59                      	pop	cx
   532 00000335 5B                      	pop	bx
   533 00000336 58                      	pop	ax
   534 00000337 9D                      	popf
   535 00000338 5D                      	pop	bp
   536 00000339 C20400                  	ret	4
   537                                  ;_____________________________________________________________________________
   538                                  ;    fun��o circle
   539                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   540                                  ; cor definida na variavel cor
   541                                  circle:
   542 0000033C 55                      	push 	bp
   543 0000033D 89E5                    	mov	bp,sp
   544 0000033F 9C                      	pushf                        ;coloca os flags na pilha
   545 00000340 50                      	push 	ax
   546 00000341 53                      	push 	bx
   547 00000342 51                      	push	cx
   548 00000343 52                      	push	dx
   549 00000344 56                      	push	si
   550 00000345 57                      	push	di
   551 00000346 8B4608                  	mov	ax,[bp+8]    ; resgata xc
   552 00000349 8B5E06                  	mov	bx,[bp+6]    ; resgata yc
   553 0000034C 8B4E04                  	mov	cx,[bp+4]    ; resgata r
   554 0000034F 89DA                    	mov 	dx,bx	
   555 00000351 01CA                    	add	dx,cx       ;ponto extremo superior
   556 00000353 50                      	push    ax			
   557 00000354 52                      	push	dx
   558 00000355 E8BDFF                  	call	plot_xy
   559 00000358 89DA                    	mov	dx,bx
   560 0000035A 29CA                    	sub	dx,cx       ;ponto extremo inferior
   561 0000035C 50                      	push    ax			
   562 0000035D 52                      	push	dx
   563 0000035E E8B4FF                  	call 	plot_xy
   564 00000361 89C2                    	mov 	dx,ax	
   565 00000363 01CA                    	add	dx,cx       ;ponto extremo direita
   566 00000365 52                      	push    dx			
   567 00000366 53                      	push	bx
   568 00000367 E8ABFF                  	call	plot_xy
   569 0000036A 89C2                    	mov	dx,ax
   570 0000036C 29CA                    	sub	dx,cx       ;ponto extremo esquerda
   571 0000036E 52                      	push    dx			
   572 0000036F 53                      	push	bx
   573 00000370 E8A2FF                  	call	plot_xy
   574 00000373 89CF                    	mov	di,cx
   575 00000375 81EF0100                	sub	di,1	 ;di=r-1
   576 00000379 BA0000                  	mov	dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   577                                  	
   578                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   579                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   580                                  ;valores positivos para d
   581                                  
   582                                  stay:				;loop
   583 0000037C 89FE                    	mov	si,di
   584 0000037E 81FE0000                	cmp	si,0
   585 00000382 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   586 00000384 89D6                    	mov	si,dx		;o jl � importante porque trata-se de conta com sinal
   587 00000386 D1E6                    	sal	si,1		;multiplica por doi (shift arithmetic left)
   588 00000388 81C60300                	add	si,3
   589 0000038C 01F7                    	add	di,si     ;nesse ponto d=d+2*dx+3
   590 0000038E 42                      	inc	dx		;incrementa dx
   591 0000038F E90E00                  	jmp	plotar
   592                                  inf:	
   593 00000392 89D6                    	mov	si,dx
   594 00000394 29CE                    	sub	si,cx  		;faz x - y (dx-cx), e salva em di 
   595 00000396 D1E6                    	sal	si,1
   596 00000398 81C60500                	add	si,5
   597 0000039C 01F7                    	add	di,si		;nesse ponto d=d+2*(dx-cx)+5
   598 0000039E 42                      	inc	dx		;incrementa x (dx)
   599 0000039F 49                      	dec	cx		;decrementa y (cx)
   600                                  	
   601                                  plotar:	
   602 000003A0 89D6                    	mov	si,dx
   603 000003A2 01C6                    	add	si,ax
   604 000003A4 56                      	push    si			;coloca a abcisa x+xc na pilha
   605 000003A5 89CE                    	mov	si,cx
   606 000003A7 01DE                    	add	si,bx
   607 000003A9 56                      	push    si			;coloca a ordenada y+yc na pilha
   608 000003AA E868FF                  	call plot_xy		;toma conta do segundo octante
   609 000003AD 89C6                    	mov	si,ax
   610 000003AF 01D6                    	add	si,dx
   611 000003B1 56                      	push    si			;coloca a abcisa xc+x na pilha
   612 000003B2 89DE                    	mov	si,bx
   613 000003B4 29CE                    	sub	si,cx
   614 000003B6 56                      	push    si			;coloca a ordenada yc-y na pilha
   615 000003B7 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   616 000003BA 89C6                    	mov	si,ax
   617 000003BC 01CE                    	add	si,cx
   618 000003BE 56                      	push    si			;coloca a abcisa xc+y na pilha
   619 000003BF 89DE                    	mov	si,bx
   620 000003C1 01D6                    	add	si,dx
   621 000003C3 56                      	push    si			;coloca a ordenada yc+x na pilha
   622 000003C4 E84EFF                  	call plot_xy		;toma conta do segundo octante
   623 000003C7 89C6                    	mov	si,ax
   624 000003C9 01CE                    	add	si,cx
   625 000003CB 56                      	push    si			;coloca a abcisa xc+y na pilha
   626 000003CC 89DE                    	mov	si,bx
   627 000003CE 29D6                    	sub	si,dx
   628 000003D0 56                      	push    si			;coloca a ordenada yc-x na pilha
   629 000003D1 E841FF                  	call plot_xy		;toma conta do oitavo octante
   630 000003D4 89C6                    	mov	si,ax
   631 000003D6 29D6                    	sub	si,dx
   632 000003D8 56                      	push    si			;coloca a abcisa xc-x na pilha
   633 000003D9 89DE                    	mov	si,bx
   634 000003DB 01CE                    	add	si,cx
   635 000003DD 56                      	push    si			;coloca a ordenada yc+y na pilha
   636 000003DE E834FF                  	call plot_xy		;toma conta do terceiro octante
   637 000003E1 89C6                    	mov	si,ax
   638 000003E3 29D6                    	sub	si,dx
   639 000003E5 56                      	push    si			;coloca a abcisa xc-x na pilha
   640 000003E6 89DE                    	mov	si,bx
   641 000003E8 29CE                    	sub	si,cx
   642 000003EA 56                      	push    si			;coloca a ordenada yc-y na pilha
   643 000003EB E827FF                  	call plot_xy		;toma conta do sexto octante
   644 000003EE 89C6                    	mov	si,ax
   645 000003F0 29CE                    	sub	si,cx
   646 000003F2 56                      	push    si			;coloca a abcisa xc-y na pilha
   647 000003F3 89DE                    	mov	si,bx
   648 000003F5 29D6                    	sub	si,dx
   649 000003F7 56                      	push    si			;coloca a ordenada yc-x na pilha
   650 000003F8 E81AFF                  	call plot_xy		;toma conta do quinto octante
   651 000003FB 89C6                    	mov	si,ax
   652 000003FD 29CE                    	sub	si,cx
   653 000003FF 56                      	push    si			;coloca a abcisa xc-y na pilha
   654 00000400 89DE                    	mov	si,bx
   655 00000402 01D6                    	add	si,dx
   656 00000404 56                      	push    si			;coloca a ordenada yc-x na pilha
   657 00000405 E80DFF                  	call plot_xy		;toma conta do quarto octante
   658                                  	
   659 00000408 39D1                    	cmp	cx,dx
   660 0000040A 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   661 0000040C E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
   662                                  	
   663                                  	
   664                                  fim_circle:
   665 0000040F 5F                      	pop	di
   666 00000410 5E                      	pop	si
   667 00000411 5A                      	pop	dx
   668 00000412 59                      	pop	cx
   669 00000413 5B                      	pop	bx
   670 00000414 58                      	pop 	ax
   671 00000415 9D                      	popf
   672 00000416 5D                      	pop	bp
   673 00000417 C20600                  	ret	6
   674                                  ;-----------------------------------------------------------------------------
   675                                  ;    fun��o full_circle
   676                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   677                                  ; cor definida na variavel cor					  
   678                                  full_circle:
   679 0000041A 55                      	push 	bp
   680 0000041B 89E5                    	mov	 	bp,sp
   681 0000041D 9C                      	pushf                        ;coloca os flags na pilha
   682 0000041E 50                      	push 	ax
   683 0000041F 53                      	push 	bx
   684 00000420 51                      	push	cx
   685 00000421 52                      	push	dx
   686 00000422 56                      	push	si
   687 00000423 57                      	push	di
   688                                  
   689 00000424 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   690 00000427 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   691 0000042A 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   692                                  	
   693 0000042D 89DE                    	mov		si,bx
   694 0000042F 29CE                    	sub		si,cx
   695 00000431 50                      	push    ax			;coloca xc na pilha			
   696 00000432 56                      	push	si			;coloca yc-r na pilha
   697 00000433 89DE                    	mov		si,bx
   698 00000435 01CE                    	add		si,cx
   699 00000437 50                      	push	ax		;coloca xc na pilha
   700 00000438 56                      	push	si		;coloca yc+r na pilha
   701 00000439 E89B00                  	call line
   702                                  	
   703                                  		
   704 0000043C 89CF                    	mov		di,cx
   705 0000043E 81EF0100                	sub		di,1	 ;di=r-1
   706 00000442 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   707                                  	
   708                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   709                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   710                                  ;valores positivos para d
   711                                  
   712                                  stay_full:				;loop
   713 00000445 89FE                    	mov		si,di
   714 00000447 81FE0000                	cmp		si,0
   715 0000044B 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   716 0000044D 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   717 0000044F D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   718 00000451 81C60300                	add		si,3
   719 00000455 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   720 00000457 42                      	inc		dx		;incrementa dx
   721 00000458 E90E00                  	jmp		plotar_full
   722                                  inf_full:	
   723 0000045B 89D6                    	mov		si,dx
   724 0000045D 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   725 0000045F D1E6                    	sal		si,1
   726 00000461 81C60500                	add		si,5
   727 00000465 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   728 00000467 42                      	inc		dx		;incrementa x (dx)
   729 00000468 49                      	dec		cx		;decrementa y (cx)
   730                                  	
   731                                  plotar_full:	
   732 00000469 89C6                    	mov		si,ax
   733 0000046B 01CE                    	add		si,cx
   734 0000046D 56                      	push	si		;coloca a abcisa y+xc na pilha			
   735 0000046E 89DE                    	mov		si,bx
   736 00000470 29D6                    	sub		si,dx
   737 00000472 56                      	push    si		;coloca a ordenada yc-x na pilha
   738 00000473 89C6                    	mov		si,ax
   739 00000475 01CE                    	add		si,cx
   740 00000477 56                      	push	si		;coloca a abcisa y+xc na pilha	
   741 00000478 89DE                    	mov		si,bx
   742 0000047A 01D6                    	add		si,dx
   743 0000047C 56                      	push    si		;coloca a ordenada yc+x na pilha	
   744 0000047D E85700                  	call 	line
   745                                  	
   746 00000480 89C6                    	mov		si,ax
   747 00000482 01D6                    	add		si,dx
   748 00000484 56                      	push	si		;coloca a abcisa xc+x na pilha			
   749 00000485 89DE                    	mov		si,bx
   750 00000487 29CE                    	sub		si,cx
   751 00000489 56                      	push    si		;coloca a ordenada yc-y na pilha
   752 0000048A 89C6                    	mov		si,ax
   753 0000048C 01D6                    	add		si,dx
   754 0000048E 56                      	push	si		;coloca a abcisa xc+x na pilha	
   755 0000048F 89DE                    	mov		si,bx
   756 00000491 01CE                    	add		si,cx
   757 00000493 56                      	push    si		;coloca a ordenada yc+y na pilha	
   758 00000494 E84000                  	call	line
   759                                  	
   760 00000497 89C6                    	mov		si,ax
   761 00000499 29D6                    	sub		si,dx
   762 0000049B 56                      	push	si		;coloca a abcisa xc-x na pilha			
   763 0000049C 89DE                    	mov		si,bx
   764 0000049E 29CE                    	sub		si,cx
   765 000004A0 56                      	push    si		;coloca a ordenada yc-y na pilha
   766 000004A1 89C6                    	mov		si,ax
   767 000004A3 29D6                    	sub		si,dx
   768 000004A5 56                      	push	si		;coloca a abcisa xc-x na pilha	
   769 000004A6 89DE                    	mov		si,bx
   770 000004A8 01CE                    	add		si,cx
   771 000004AA 56                      	push    si		;coloca a ordenada yc+y na pilha	
   772 000004AB E82900                  	call	line
   773                                  	
   774 000004AE 89C6                    	mov		si,ax
   775 000004B0 29CE                    	sub		si,cx
   776 000004B2 56                      	push	si		;coloca a abcisa xc-y na pilha			
   777 000004B3 89DE                    	mov		si,bx
   778 000004B5 29D6                    	sub		si,dx
   779 000004B7 56                      	push    si		;coloca a ordenada yc-x na pilha
   780 000004B8 89C6                    	mov		si,ax
   781 000004BA 29CE                    	sub		si,cx
   782 000004BC 56                      	push	si		;coloca a abcisa xc-y na pilha	
   783 000004BD 89DE                    	mov		si,bx
   784 000004BF 01D6                    	add		si,dx
   785 000004C1 56                      	push    si		;coloca a ordenada yc+x na pilha	
   786 000004C2 E81200                  	call	line
   787                                  	
   788 000004C5 39D1                    	cmp		cx,dx
   789 000004C7 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   790 000004C9 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   791                                  	
   792                                  	
   793                                  fim_full_circle:
   794 000004CC 5F                      	pop		di
   795 000004CD 5E                      	pop		si
   796 000004CE 5A                      	pop		dx
   797 000004CF 59                      	pop		cx
   798 000004D0 5B                      	pop		bx
   799 000004D1 58                      	pop		ax
   800 000004D2 9D                      	popf
   801 000004D3 5D                      	pop		bp
   802 000004D4 C20600                  	ret		6
   803                                  ;-----------------------------------------------------------------------------
   804                                  ;
   805                                  ;   fun��o line
   806                                  ;
   807                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   808                                  line:
   809 000004D7 55                      	push		bp
   810 000004D8 89E5                    	mov		bp,sp
   811 000004DA 9C                      	pushf                        ;coloca os flags na pilha
   812 000004DB 50                      	push 		ax
   813 000004DC 53                      	push 		bx
   814 000004DD 51                      	push		cx
   815 000004DE 52                      	push		dx
   816 000004DF 56                      	push		si
   817 000004E0 57                      	push		di
   818 000004E1 8B460A                  	mov		ax,[bp+10]   ; resgata os valores das coordenadas
   819 000004E4 8B5E08                  	mov		bx,[bp+8]    ; resgata os valores das coordenadas
   820 000004E7 8B4E06                  	mov		cx,[bp+6]    ; resgata os valores das coordenadas
   821 000004EA 8B5604                  	mov		dx,[bp+4]    ; resgata os valores das coordenadas
   822 000004ED 39C8                    	cmp		ax,cx
   823 000004EF 7408                    	je		line2
   824 000004F1 721C                    	jb		line1
   825 000004F3 91                      	xchg		ax,cx
   826 000004F4 87DA                    	xchg		bx,dx
   827 000004F6 E91600                  	jmp		line1
   828                                  line2:		; deltax=0
   829 000004F9 39D3                    	cmp		bx,dx  ;subtrai dx de bx
   830 000004FB 7202                    	jb		line3
   831 000004FD 87DA                    	xchg		bx,dx        ;troca os valores de bx e dx entre eles
   832                                  line3:	; dx > bx
   833 000004FF 50                      	push		ax
   834 00000500 53                      	push		bx
   835 00000501 E811FE                  	call 		plot_xy
   836 00000504 39D3                    	cmp		bx,dx
   837 00000506 7503                    	jne		line31
   838 00000508 E9C600                  	jmp		fim_line
   839 0000050B 43                      line31:	inc		bx
   840 0000050C E9F0FF                  	jmp		line3
   841                                  ;deltax <>0
   842                                  line1:
   843                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   844                                  	; cx > ax
   845 0000050F 51                      		push		cx
   846 00000510 29C1                    		sub		cx,ax
   847 00000512 890E[0600]              		mov		[deltax],cx
   848 00000516 59                      		pop		cx
   849 00000517 52                      		push		dx
   850 00000518 29DA                    		sub		dx,bx
   851 0000051A 7702                    		ja		line32
   852 0000051C F7DA                    		neg		dx
   853                                  line32:		
   854 0000051E 8916[0800]              		mov		[deltay],dx
   855 00000522 5A                      		pop		dx
   856                                  
   857 00000523 50                      		push		ax
   858 00000524 A1[0600]                		mov		ax,[deltax]
   859 00000527 3B06[0800]              		cmp		ax,[deltay]
   860 0000052B 58                      		pop		ax
   861 0000052C 724D                    		jb		line5
   862                                  
   863                                  	; cx > ax e deltax>deltay
   864 0000052E 51                      		push		cx
   865 0000052F 29C1                    		sub		cx,ax
   866 00000531 890E[0600]              		mov		[deltax],cx
   867 00000535 59                      		pop		cx
   868 00000536 52                      		push		dx
   869 00000537 29DA                    		sub		dx,bx
   870 00000539 8916[0800]              		mov		[deltay],dx
   871 0000053D 5A                      		pop		dx
   872                                  
   873 0000053E 89C6                    		mov		si,ax
   874                                  line4:
   875 00000540 50                      		push		ax
   876 00000541 52                      		push		dx
   877 00000542 56                      		push		si
   878 00000543 29C6                    		sub		si,ax	;(x-x1)
   879 00000545 A1[0800]                		mov		ax,[deltay]
   880 00000548 F7EE                    		imul		si
   881 0000054A 8B36[0600]              		mov		si,[deltax]		;arredondar
   882 0000054E D1EE                    		shr		si,1
   883                                  ; se numerador (DX)>0 soma se <0 subtrai
   884 00000550 81FA0000                		cmp		dx,0
   885 00000554 7C09                    		jl		ar1
   886 00000556 01F0                    		add		ax,si
   887 00000558 81D20000                		adc		dx,0
   888 0000055C E90600                  		jmp		arc1
   889 0000055F 29F0                    ar1:		sub		ax,si
   890 00000561 81DA0000                		sbb		dx,0
   891                                  arc1:
   892 00000565 F73E[0600]              		idiv		word [deltax]
   893 00000569 01D8                    		add		ax,bx
   894 0000056B 5E                      		pop		si
   895 0000056C 56                      		push		si
   896 0000056D 50                      		push		ax
   897 0000056E E8A4FD                  		call		plot_xy
   898 00000571 5A                      		pop		dx
   899 00000572 58                      		pop		ax
   900 00000573 39CE                    		cmp		si,cx
   901 00000575 745A                    		je		fim_line
   902 00000577 46                      		inc		si
   903 00000578 E9C5FF                  		jmp		line4
   904                                  
   905 0000057B 39D3                    line5:		cmp		bx,dx
   906 0000057D 7203                    		jb 		line7
   907 0000057F 91                      		xchg		ax,cx
   908 00000580 87DA                    		xchg		bx,dx
   909                                  line7:
   910 00000582 51                      	push cx
   911 00000583 29C1                    	sub cx,ax
   912 00000585 890E[0600]              	mov  [deltax],cx
   913 00000589 59                      	pop  cx
   914 0000058A 52                      	push dx
   915 0000058B 29DA                    	sub dx,bx
   916 0000058D 8916[0800]              	mov [deltay],dx
   917 00000591 5A                      	pop dx
   918 00000592 89DE                    	mov si,bx
   919                                  line6:
   920 00000594 52                      	push dx
   921 00000595 56                      	push si
   922 00000596 50                      	push ax
   923 00000597 29DE                    	sub  si,bx	;(y-y1)
   924 00000599 A1[0600]                	mov  ax,[deltax]
   925 0000059C F7EE                    	imul si
   926 0000059E 8B36[0800]              	mov  si,[deltay]		;arredondar
   927 000005A2 D1EE                    	shr  si,1
   928                                  ; se numerador (DX)>0 soma se <0 subtrai
   929 000005A4 81FA0000                	cmp  dx,0
   930 000005A8 7C09                    	jl   ar2
   931 000005AA 01F0                    	add  ax,si
   932 000005AC 81D20000                	adc  dx,0
   933 000005B0 E90600                  	jmp  arc2
   934                                  ar2:	
   935 000005B3 29F0                    	sub ax, si
   936 000005B5 81DA0000                	sbb dx, 0
   937                                  arc2:
   938 000005B9 F73E[0800]              	idiv word [deltay]
   939 000005BD 89C7                    	mov di, ax
   940 000005BF 58                      	pop ax
   941 000005C0 01C7                    	add di, ax
   942 000005C2 5E                      	pop si
   943 000005C3 57                      	push di
   944 000005C4 56                      	push si
   945 000005C5 E84DFD                  	call plot_xy
   946 000005C8 5A                      	pop dx
   947 000005C9 39D6                    	cmp si, dx
   948 000005CB 7404                    	je  fim_line
   949 000005CD 46                      	inc si
   950 000005CE E9C3FF                  	jmp line6
   951                                  
   952                                  fim_line:
   953 000005D1 5F                      	pop di
   954 000005D2 5E                      	pop si
   955 000005D3 5A                      	pop dx
   956 000005D4 59                      	pop cx
   957 000005D5 5B                      	pop bx
   958 000005D6 58                      	pop ax
   959 000005D7 9D                      	popf
   960 000005D8 5D                      	pop bp
   961 000005D9 C20800                  	ret 8
   962                                  ;*******************************************************************
   963                                  segment data
   964 00000000 0F                      cor      	db		branco_intenso
   965                                  ; I R G B COR
   966                                  ; 0 0 0 0 preto
   967                                  ; 0 0 0 1 azul
   968                                  ; 0 0 1 0 verde
   969                                  ; 0 0 1 1 cyan
   970                                  ; 0 1 0 0 vermelho
   971                                  ; 0 1 0 1 magenta
   972                                  ; 0 1 1 0 marrom
   973                                  ; 0 1 1 1 branco
   974                                  ; 1 0 0 0 cinza
   975                                  ; 1 0 0 1 azul claro
   976                                  ; 1 0 1 0 verde claro
   977                                  ; 1 0 1 1 cyan claro
   978                                  ; 1 1 0 0 rosa
   979                                  ; 1 1 0 1 magenta claro
   980                                  ; 1 1 1 0 amarelo
   981                                  ; 1 1 1 1 branco intenso
   982                                  
   983                                  preto		equ		0
   984                                  azul		equ		1
   985                                  verde		equ		2
   986                                  cyan		equ		3
   987                                  vermelho	equ		4
   988                                  magenta		equ		5
   989                                  marrom		equ		6
   990                                  branco		equ		7
   991                                  cinza		equ		8
   992                                  azul_claro	equ		9
   993                                  verde_claro	equ		10
   994                                  cyan_claro	equ		11
   995                                  rosa		equ		12
   996                                  magenta_claro	equ		13
   997                                  amarelo		equ		14
   998                                  branco_intenso	equ		15
   999                                  
  1000 00000001 00                      modo_anterior	db		0
  1001 00000002 0000                    linha   	dw  		0
  1002 00000004 0000                    coluna  	dw  		0
  1003 00000006 0000                    deltax		dw		0
  1004 00000008 0000                    deltay		dw		0	
  1005 0000000A 414252495224            abrir    	db  		'ABRIR$'
  1006 00000010 5341495224              sair    	db  		'SAIR$'
  1007 00000015 4849535424              hist    	db  		'HIST$'
  1008 0000001A 48495354455124          eqhist    	db  		'HISTEQ$'
  1009 00000021 484953544F4752414D-     txeqhist    	db  		'HISTOGRAMA ORIGINAL$'
  1010 0000002A 41204F524947494E41-
  1011 00000033 4C24               
  1012 00000035 484953544F4752414D-     txhist    	db  		'HISTOGRAMA EQUALIZADO$'
  1013 0000003E 4120455155414C495A-
  1014 00000047 41444F24           
  1015 0000004B 524F444F4C464F2056-     nome    	db  		'RODOLFO VALENTIM$'
  1016 00000054 414C454E54494D24   
  1017 0000005C 53495354454D415320-     disc    	db  		'SISTEMAS EMBARCADOS 2016/1$'
  1018 00000065 454D4241524341444F-
  1019 0000006E 5320323031362F3124 
  1020 00000077 74657374652E747874-     filename	db		'teste.txt', 0
  1021 00000080 00                 
  1022 00000081 00                      buffer		db		0
  1023 00000082 0000                    handle 		dw 		0
  1024 00000084 00                      input		db		0
  1025 00000085 0000<rept>              histogram:	times		256 dw 0
  1026 00000285 0000<rept>              cfd:		times		256 dw 0
  1027 00000485 <res 0000F424>          image:		resb  		62500
  1028                                  
  1029                                  ;*************************************************************************
  1030                                  
  1031                                  segment stack stack
  1032 00000000 <res 00000100>             		resb 		256
  1033                                  stacktop:
  1034                                  
  1035                                  

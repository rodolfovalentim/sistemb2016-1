     1                                  ; Rodolfo Vieira Valentim
     2                                  ; Sistemas Embarcados 2016/1
     3                                  
     4                                  %macro drawline 5 		;x1,y1,x2,y2,color
     5                                  	mov	ax,%1
     6                                  	push	ax
     7                                  	mov	ax,%2
     8                                  	push	ax
     9                                  	mov	ax,%3
    10                                  	push	ax
    11                                  	mov	ax,%4
    12                                  	push	ax
    13                                  	mov	byte[cor],%5
    14                                  	call	line
    15                                  %endmacro
    16                                  
    17                                  %macro ponto 2			; x,y,color
    18                                  	add %1, 3
    19                                  	add %2, 100
    20                                  	push %1
    21                                  	push %2	
    22                                  	call plot_xy
    23                                  	sub %1, 3
    24                                  	sub %2, 100
    25                                  %endmacro
    26                                  
    27                                  %macro writeword 3
    28                                      	mov     bx,0
    29                                      	mov     dh,%2			;linha 0-29
    30                                      	mov     dl,%3			;coluna 0-79
    31                                  %%local:
    32                                  	call	cursor
    33                                      	mov     al,[bx+%1]
    34                                  	cmp	al, '$'
    35                                  	je	%%exit
    36                                  	call	caracter
    37                                      	inc     bx			;proximo caracter
    38                                  	inc	dl			;avanca a coluna
    39                                      	jmp	%%local
    40                                  %%exit:
    41                                  %endmacro
    42                                  
    43                                  ;*******************************************************************
    44                                  
    45                                  segment code
    46                                  ..start:
    47 00000000 B8[0000]                    	mov ax,data
    48 00000003 8ED8                        	mov ds,ax
    49 00000005 B8[0000]                    	mov ax,stack
    50 00000008 8ED0                        	mov ss,ax
    51 0000000A BC[0001]                    	mov sp,stacktop
    52                                  
    53                                  ;*******************************************************************
    54                                  
    55                                  	;abre arquivo
    56 0000000D B43D                    	mov ah, 3Dh
    57 0000000F B000                    	mov al, 00
    58 00000011 BA[7700]                	mov dx, filename
    59 00000014 B90100                  	mov cx, 1
    60 00000017 CD21                    	int 21h	
    61                                  
    62 00000019 A3[8300]                	mov word[handle], ax
    63 0000001C BE[8606]                	mov si, image
    64                                  
    65                                  read:
    66 0000001F B43F                     	mov ah, 3Fh
    67 00000021 8B1E[8300]              	mov bx, word[handle]
    68 00000025 B90100                  	mov cx, 1
    69 00000028 BA[8500]                	mov dx, input
    70 0000002B CD21                    	int 21h
    71                                  
    72                                  	;verifica se o arquivo acabou	
    73 0000002D 39C8                    	cmp ax, cx
    74 0000002F 7C2A                    	jl finishread
    75                                  	
    76                                  	;compara com o espa√ßo
    77 00000031 8A16[8500]              	mov dl, byte[input]
    78 00000035 80FA20                  	cmp dl, 20h
    79 00000038 7412                    	je store
    80                                  
    81                                  	;cmp dl, '0'
    82                                  	;jl finishread
    83                                  
    84 0000003A A0[8200]                	mov al, byte[buffer]
    85 0000003D 80EA30                  	sub dl, '0'
    86 00000040 B30A                    	mov bl, 0ah
    87 00000042 F6E3                    	mul bl
    88 00000044 00D0                    	add al, dl
    89 00000046 A2[8200]                	mov byte[buffer], al
    90 00000049 E9D3FF                  	jmp read
    91                                  	
    92                                  store:
    93 0000004C 8A16[8200]              	mov dl, byte[buffer]
    94 00000050 8814                    	mov byte[si], dl
    95 00000052 46                      	inc si
    96 00000053 C606[8200]00            	mov byte[buffer], 00h
    97 00000058 E9C4FF                  	jmp read
    98                                  
    99                                  finishread:
   100                                  	; termina a leitura da imagem
   101 0000005B 8A16[8200]              	mov dl, [buffer]	
   102 0000005F 8814                    	mov byte[si], dl
   103                                  
   104                                  ;*******************************************************************
   105                                  
   106                                  doHistogram:
   107 00000061 BE[8606]                	mov si, image
   108 00000064 BF[8600]                	mov di, histogram
   109 00000067 B925F4                  	mov cx, 62501
   110                                  L2:
   111 0000006A B700                    	mov bh, 00h
   112 0000006C 8A1C                    	mov bl, byte[si]
   113 0000006E 01DB                    	add bx, bx
   114 00000070 81010100                	add word[di+bx], 0001h
   115 00000074 46                      	inc si
   116 00000075 E2F3                    	loop L2
   117                                  
   118                                  ;*******************************************************************
   119                                  
   120                                  acumulate:
   121 00000077 BE[8600]                	mov si, histogram
   122 0000007A BF[8602]                	mov di, cfd
   123                                  	
   124 0000007D 8B1C                    	mov bx, [si]
   125 0000007F 891D                    	mov [di], bx
   126 00000081 81C60200                	add si, 2
   127 00000085 B9FF00                  	mov cx, 255
   128                                  L4:
   129 00000088 8B1C                    	mov bx, [si]
   130 0000008A 015D02                  	add [di+2], bx
   131 0000008D 8B1D                    	mov bx, [di]
   132 0000008F 015D02                  	add [di+2], bx
   133 00000092 81C70200                	add di, 2
   134 00000096 81C60200                	add si, 2
   135 0000009A E2EC                    	loop L4
   136                                  
   137                                  equalize:
   138 0000009C BF[8606]                	mov di, image
   139 0000009F B924F4                  	mov cx, 62500
   140 000000A2 BB24F4                  	mov bx, 62500
   141                                  
   142                                  L7:
   143 000000A5 8A05                    	mov al, byte[di]
   144 000000A7 25FF00                  	and ax, 00FFh
   145 000000AA 89C6                    	mov si, ax
   146 000000AC 01F6                    	add si, si
   147 000000AE 8B84[8602]              	mov ax, [cfd+si]
   148 000000B2 BB0001                  	mov bx, 256	
   149 000000B5 F7E3                    	mul bx	
   150 000000B7 BB24F4                  	mov bx, 62500
   151 000000BA F7F3                    	div bx
   152 000000BC 8805                    	mov [di], al
   153 000000BE 47                      	inc di
   154 000000BF E2E4                    	loop L7
   155                                  
   156                                  doHistogramEq:
   157 000000C1 BE[8606]                	mov si, image
   158 000000C4 BF[8604]                	mov di, eqhistogram
   159 000000C7 B925F4                  	mov cx, 62501
   160                                  L10:
   161 000000CA B700                    	mov bh, 00h
   162 000000CC 8A1C                    	mov bl, byte[si]
   163 000000CE 01DB                    	add bx, bx
   164 000000D0 81010100                	add word[di+bx], 0001h
   165 000000D4 46                      	inc si
   166 000000D5 E2F3                    	loop L10
   167                                  
   168                                  ;*******************************************************************
   169                                  
   170                                  
   171                                  
   172                                  ; salvar modo corrente de video(vendo como esta o modo de video da maquina)
   173 000000D7 B40F                            mov 	ah,0Fh
   174 000000D9 CD10                        	int 	10h
   175 000000DB A2[0100]                    	mov 	[modo_anterior],al   
   176                                  
   177                                  ; alterar modo de video para grafico 640x480 16 cores
   178 000000DE B012                        	mov    	al,12h
   179 000000E0 B400                       	mov    	ah,0
   180 000000E2 CD10                        	int    	10h
   181                                  	
   182                                  ;escrever uma mensagem
   183                                  
   184                                  	drawline 255, 0, 255, 479, branco_intenso
   185 000000E4 B8FF00              <1> 	mov	ax,%1
   186 000000E7 50                  <1> 	push	ax
   187 000000E8 B80000              <1> 	mov	ax,%2
   188 000000EB 50                  <1> 	push	ax
   189 000000EC B8FF00              <1> 	mov	ax,%3
   190 000000EF 50                  <1> 	push	ax
   191 000000F0 B8DF01              <1> 	mov	ax,%4
   192 000000F3 50                  <1> 	push	ax
   193 000000F4 C606[0000]0F        <1> 	mov	byte[cor],%5
   194 000000F9 E81504              <1> 	call	line
   195                                  	drawline 255, 239, 639, 239, branco_intenso
   196 000000FC B8FF00              <1> 	mov	ax,%1
   197 000000FF 50                  <1> 	push	ax
   198 00000100 B8EF00              <1> 	mov	ax,%2
   199 00000103 50                  <1> 	push	ax
   200 00000104 B87F02              <1> 	mov	ax,%3
   201 00000107 50                  <1> 	push	ax
   202 00000108 B8EF00              <1> 	mov	ax,%4
   203 0000010B 50                  <1> 	push	ax
   204 0000010C C606[0000]0F        <1> 	mov	byte[cor],%5
   205 00000111 E8FD03              <1> 	call	line
   206                                  	drawline 63, 479, 63, 431, branco_intenso
   207 00000114 B83F00              <1> 	mov	ax,%1
   208 00000117 50                  <1> 	push	ax
   209 00000118 B8DF01              <1> 	mov	ax,%2
   210 0000011B 50                  <1> 	push	ax
   211 0000011C B83F00              <1> 	mov	ax,%3
   212 0000011F 50                  <1> 	push	ax
   213 00000120 B8AF01              <1> 	mov	ax,%4
   214 00000123 50                  <1> 	push	ax
   215 00000124 C606[0000]0F        <1> 	mov	byte[cor],%5
   216 00000129 E8E503              <1> 	call	line
   217                                  	drawline 127, 479, 127, 431, branco_intenso
   218 0000012C B87F00              <1> 	mov	ax,%1
   219 0000012F 50                  <1> 	push	ax
   220 00000130 B8DF01              <1> 	mov	ax,%2
   221 00000133 50                  <1> 	push	ax
   222 00000134 B87F00              <1> 	mov	ax,%3
   223 00000137 50                  <1> 	push	ax
   224 00000138 B8AF01              <1> 	mov	ax,%4
   225 0000013B 50                  <1> 	push	ax
   226 0000013C C606[0000]0F        <1> 	mov	byte[cor],%5
   227 00000141 E8CD03              <1> 	call	line
   228                                  	drawline 191, 479, 191, 431, branco_intenso
   229 00000144 B8BF00              <1> 	mov	ax,%1
   230 00000147 50                  <1> 	push	ax
   231 00000148 B8DF01              <1> 	mov	ax,%2
   232 0000014B 50                  <1> 	push	ax
   233 0000014C B8BF00              <1> 	mov	ax,%3
   234 0000014F 50                  <1> 	push	ax
   235 00000150 B8AF01              <1> 	mov	ax,%4
   236 00000153 50                  <1> 	push	ax
   237 00000154 C606[0000]0F        <1> 	mov	byte[cor],%5
   238 00000159 E8B503              <1> 	call	line
   239                                  	drawline 0, 431, 255, 431, branco_intenso
   240 0000015C B80000              <1> 	mov	ax,%1
   241 0000015F 50                  <1> 	push	ax
   242 00000160 B8AF01              <1> 	mov	ax,%2
   243 00000163 50                  <1> 	push	ax
   244 00000164 B8FF00              <1> 	mov	ax,%3
   245 00000167 50                  <1> 	push	ax
   246 00000168 B8AF01              <1> 	mov	ax,%4
   247 0000016B 50                  <1> 	push	ax
   248 0000016C C606[0000]0F        <1> 	mov	byte[cor],%5
   249 00000171 E89D03              <1> 	call	line
   250                                  	drawline 0, 63, 255, 63, branco_intenso
   251 00000174 B80000              <1> 	mov	ax,%1
   252 00000177 50                  <1> 	push	ax
   253 00000178 B83F00              <1> 	mov	ax,%2
   254 0000017B 50                  <1> 	push	ax
   255 0000017C B8FF00              <1> 	mov	ax,%3
   256 0000017F 50                  <1> 	push	ax
   257 00000180 B83F00              <1> 	mov	ax,%4
   258 00000183 50                  <1> 	push	ax
   259 00000184 C606[0000]0F        <1> 	mov	byte[cor],%5
   260 00000189 E88503              <1> 	call	line
   261                                  
   262                                  	writeword abrir, 1, 1
   263 0000018C BB0000              <1>     	mov     bx,0
   264 0000018F B601                <1>     	mov     dh,%2
   265 00000191 B201                <1>     	mov     dl,%3
   266                              <1> %%local:
   267 00000193 E88401              <1> 	call	cursor
   268 00000196 8A87[0A00]          <1>     	mov     al,[bx+%1]
   269 0000019A 3C24                <1> 	cmp	al, '$'
   270 0000019C 7409                <1> 	je	%%exit
   271 0000019E E89001              <1> 	call	caracter
   272 000001A1 43                  <1>     	inc     bx
   273 000001A2 FEC2                <1> 	inc	dl
   274 000001A4 E9ECFF              <1>     	jmp	%%local
   275                              <1> %%exit:
   276                                  	writeword sair, 1, 10
   277 000001A7 BB0000              <1>     	mov     bx,0
   278 000001AA B601                <1>     	mov     dh,%2
   279 000001AC B20A                <1>     	mov     dl,%3
   280                              <1> %%local:
   281 000001AE E86901              <1> 	call	cursor
   282 000001B1 8A87[1000]          <1>     	mov     al,[bx+%1]
   283 000001B5 3C24                <1> 	cmp	al, '$'
   284 000001B7 7409                <1> 	je	%%exit
   285 000001B9 E87501              <1> 	call	caracter
   286 000001BC 43                  <1>     	inc     bx
   287 000001BD FEC2                <1> 	inc	dl
   288 000001BF E9ECFF              <1>     	jmp	%%local
   289                              <1> %%exit:
   290                                  	writeword hist, 1, 18
   291 000001C2 BB0000              <1>     	mov     bx,0
   292 000001C5 B601                <1>     	mov     dh,%2
   293 000001C7 B212                <1>     	mov     dl,%3
   294                              <1> %%local:
   295 000001C9 E84E01              <1> 	call	cursor
   296 000001CC 8A87[1500]          <1>     	mov     al,[bx+%1]
   297 000001D0 3C24                <1> 	cmp	al, '$'
   298 000001D2 7409                <1> 	je	%%exit
   299 000001D4 E85A01              <1> 	call	caracter
   300 000001D7 43                  <1>     	inc     bx
   301 000001D8 FEC2                <1> 	inc	dl
   302 000001DA E9ECFF              <1>     	jmp	%%local
   303                              <1> %%exit:
   304                                  	writeword eqhist, 1, 25
   305 000001DD BB0000              <1>     	mov     bx,0
   306 000001E0 B601                <1>     	mov     dh,%2
   307 000001E2 B219                <1>     	mov     dl,%3
   308                              <1> %%local:
   309 000001E4 E83301              <1> 	call	cursor
   310 000001E7 8A87[1A00]          <1>     	mov     al,[bx+%1]
   311 000001EB 3C24                <1> 	cmp	al, '$'
   312 000001ED 7409                <1> 	je	%%exit
   313 000001EF E83F01              <1> 	call	caracter
   314 000001F2 43                  <1>     	inc     bx
   315 000001F3 FEC2                <1> 	inc	dl
   316 000001F5 E9ECFF              <1>     	jmp	%%local
   317                              <1> %%exit:
   318                                  	writeword txhist, 1, 33
   319 000001F8 BB0000              <1>     	mov     bx,0
   320 000001FB B601                <1>     	mov     dh,%2
   321 000001FD B221                <1>     	mov     dl,%3
   322                              <1> %%local:
   323 000001FF E81801              <1> 	call	cursor
   324 00000202 8A87[3500]          <1>     	mov     al,[bx+%1]
   325 00000206 3C24                <1> 	cmp	al, '$'
   326 00000208 7409                <1> 	je	%%exit
   327 0000020A E82401              <1> 	call	caracter
   328 0000020D 43                  <1>     	inc     bx
   329 0000020E FEC2                <1> 	inc	dl
   330 00000210 E9ECFF              <1>     	jmp	%%local
   331                              <1> %%exit:
   332                                  	writeword txeqhist, 16, 33
   333 00000213 BB0000              <1>     	mov     bx,0
   334 00000216 B610                <1>     	mov     dh,%2
   335 00000218 B221                <1>     	mov     dl,%3
   336                              <1> %%local:
   337 0000021A E8FD00              <1> 	call	cursor
   338 0000021D 8A87[2100]          <1>     	mov     al,[bx+%1]
   339 00000221 3C24                <1> 	cmp	al, '$'
   340 00000223 7409                <1> 	je	%%exit
   341 00000225 E80901              <1> 	call	caracter
   342 00000228 43                  <1>     	inc     bx
   343 00000229 FEC2                <1> 	inc	dl
   344 0000022B E9ECFF              <1>     	jmp	%%local
   345                              <1> %%exit:
   346                                  	writeword nome, 27, 1
   347 0000022E BB0000              <1>     	mov     bx,0
   348 00000231 B61B                <1>     	mov     dh,%2
   349 00000233 B201                <1>     	mov     dl,%3
   350                              <1> %%local:
   351 00000235 E8E200              <1> 	call	cursor
   352 00000238 8A87[4B00]          <1>     	mov     al,[bx+%1]
   353 0000023C 3C24                <1> 	cmp	al, '$'
   354 0000023E 7409                <1> 	je	%%exit
   355 00000240 E8EE00              <1> 	call	caracter
   356 00000243 43                  <1>     	inc     bx
   357 00000244 FEC2                <1> 	inc	dl
   358 00000246 E9ECFF              <1>     	jmp	%%local
   359                              <1> %%exit:
   360                                  	writeword disc, 28, 1
   361 00000249 BB0000              <1>     	mov     bx,0
   362 0000024C B61C                <1>     	mov     dh,%2
   363 0000024E B201                <1>     	mov     dl,%3
   364                              <1> %%local:
   365 00000250 E8C700              <1> 	call	cursor
   366 00000253 8A87[5C00]          <1>     	mov     al,[bx+%1]
   367 00000257 3C24                <1> 	cmp	al, '$'
   368 00000259 7409                <1> 	je	%%exit
   369 0000025B E8D300              <1> 	call	caracter
   370 0000025E 43                  <1>     	inc     bx
   371 0000025F FEC2                <1> 	inc	dl
   372 00000261 E9ECFF              <1>     	jmp	%%local
   373                              <1> %%exit:
   374                                  
   375 00000264 BE0000                  	mov si, 0  	; x
   376 00000267 BFF900                  	mov di, 249	; y
   377 0000026A BB[8606]                	mov bx, image
   378                                  
   379 0000026D 81FF0000                L3:	cmp di, 0
   380 00000271 7434                    	je EL3
   381 00000273 B400                    	mov ah, 00h
   382 00000275 8A07                    	mov al, byte[bx]
   383 00000277 C0E804                  	shr al, 4
   384 0000027A A2[0000]                	mov byte[cor], al	
   385                                  	ponto si, di
   386 0000027D 81C60300            <1> 	add %1, 3
   387 00000281 81C76400            <1> 	add %2, 100
   388 00000285 56                  <1> 	push %1
   389 00000286 57                  <1> 	push %2
   390 00000287 E8C500              <1> 	call plot_xy
   391 0000028A 81EE0300            <1> 	sub %1, 3
   392 0000028E 81EF6400            <1> 	sub %2, 100
   393 00000292 46                      	inc si
   394 00000293 43                      	inc bx	
   395 00000294 81FEFA00                	cmp si, 250
   396 00000298 7403                    	je RCAX
   397 0000029A E9D0FF                  	jmp L3
   398                                  RCAX:	;reset counter ax
   399 0000029D BE0000                  	mov si, 0
   400 000002A0 81EF0100                	sub di, 1
   401 000002A4 E9C6FF                  	jmp L3
   402                                  EL3: 	; end of loop 3		
   403                                  
   404                                  	; plot histogram
   405 000002A7 B93F01                  	mov cx, 319
   406 000002AA BB[8600]                	mov bx, histogram
   407                                  
   408                                  L5:
   409 000002AD 81F93F02                	cmp cx, 575
   410 000002B1 7426                    	je EL5
   411 000002B3 8B17                    	mov dx, word[bx]
   412 000002B5 C1EA04                  	shr dx, 4
   413 000002B8 81C21000                	add dx, 16
   414                                  	drawline cx, 16, cx, dx, branco_intenso
   415 000002BC 89C8                <1> 	mov	ax,%1
   416 000002BE 50                  <1> 	push	ax
   417 000002BF B81000              <1> 	mov	ax,%2
   418 000002C2 50                  <1> 	push	ax
   419 000002C3 89C8                <1> 	mov	ax,%3
   420 000002C5 50                  <1> 	push	ax
   421 000002C6 89D0                <1> 	mov	ax,%4
   422 000002C8 50                  <1> 	push	ax
   423 000002C9 C606[0000]0F        <1> 	mov	byte[cor],%5
   424 000002CE E84002              <1> 	call	line
   425 000002D1 81C30200                	add bx, 2 
   426 000002D5 41                      	inc cx
   427 000002D6 E9D4FF                  	jmp L5
   428                                  EL5: 	; end of loop 3	
   429                                  
   430                                  	; plot histogram
   431 000002D9 B93F01                  	mov cx, 319
   432 000002DC BB[8604]                	mov bx, eqhistogram
   433                                  L6:
   434 000002DF 81F93F02                	cmp cx, 575
   435 000002E3 7426                    	je EL6
   436 000002E5 8B17                    	mov dx, word[bx]
   437 000002E7 C1EA04                  	shr dx, 4
   438 000002EA 81C2FA00                	add dx, 250
   439                                  	drawline cx, 250, cx, dx, branco_intenso
   440 000002EE 89C8                <1> 	mov	ax,%1
   441 000002F0 50                  <1> 	push	ax
   442 000002F1 B8FA00              <1> 	mov	ax,%2
   443 000002F4 50                  <1> 	push	ax
   444 000002F5 89C8                <1> 	mov	ax,%3
   445 000002F7 50                  <1> 	push	ax
   446 000002F8 89D0                <1> 	mov	ax,%4
   447 000002FA 50                  <1> 	push	ax
   448 000002FB C606[0000]0F        <1> 	mov	byte[cor],%5
   449 00000300 E80E02              <1> 	call	line
   450 00000303 81C30200                	add bx, 2 
   451 00000307 41                      	inc cx
   452 00000308 E9D4FF                  	jmp L6
   453                                  EL6: 	; end of loop 6
   454                                  
   455 0000030B B408                    	mov ah,08h
   456 0000030D CD21                    	int 21h
   457 0000030F B400                    	mov ah,0   			; set video mode
   458 00000311 A0[0100]                	mov al,[modo_anterior]   	; modo anterior
   459 00000314 CD10                    	int 10h
   460                                  
   461 00000316 B44C                    	mov ah, 4Ch
   462 00000318 CD21                    	int 21h
   463                                  ;***************************************************************************
   464                                  ; fun√ß√£o cursor
   465                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   466                                  ;***************************************************************************
   467                                  cursor:
   468 0000031A 9C                      	pushf
   469 0000031B 50                      	push 	ax
   470 0000031C 53                      	push 	bx
   471 0000031D 51                      	push	cx
   472 0000031E 52                      	push	dx
   473 0000031F 56                      	push	si
   474 00000320 57                      	push	di
   475 00000321 55                      	push	bp
   476 00000322 B402                    	mov    	ah,2
   477 00000324 B700                    	mov    	bh,0
   478 00000326 CD10                    	int    	10h
   479 00000328 5D                      	pop	bp
   480 00000329 5F                      	pop	di
   481 0000032A 5E                      	pop	si
   482 0000032B 5A                      	pop	dx
   483 0000032C 59                      	pop	cx
   484 0000032D 5B                      	pop	bx
   485 0000032E 58                      	pop	ax
   486 0000032F 9D                      	popf
   487 00000330 C3                      	ret
   488                                  ;_____________________________________________________________________________
   489                                  ;
   490                                  ;   funÔøΩÔøΩo caracter escrito na posiÔøΩÔøΩo do cursor
   491                                  ;
   492                                  ; al= caracter a ser escrito
   493                                  ; cor definida na variavel cor
   494                                  caracter:
   495 00000331 9C                      	pushf
   496 00000332 50                      	push	ax
   497 00000333 53                      	push	bx
   498 00000334 51                      	push	cx
   499 00000335 52                      	push	dx
   500 00000336 56                      	push	si
   501 00000337 57                      	push	di
   502 00000338 55                      	push	bp
   503 00000339 B409                        	mov    	ah,9
   504 0000033B B700                        	mov    	bh,0
   505 0000033D B90100                      	mov    	cx,1
   506 00000340 8A1E[0000]                 	mov    	bl,[cor]
   507 00000344 CD10                        	int    	10h
   508 00000346 5D                      	pop	bp
   509 00000347 5F                      	pop	di
   510 00000348 5E                      	pop	si
   511 00000349 5A                      	pop	dx
   512 0000034A 59                      	pop	cx
   513 0000034B 5B                      	pop	bx
   514 0000034C 58                      	pop	ax
   515 0000034D 9D                      	popf
   516 0000034E C3                      	ret
   517                                  ;_____________________________________________________________________________
   518                                  ;
   519                                  ;   fun√ß√£o plot_xy
   520                                  ;
   521                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   522                                  ; cor definida na variavel cor
   523                                  plot_xy:
   524 0000034F 55                      	push	bp
   525 00000350 89E5                    	mov	bp,sp
   526 00000352 9C                      	pushf
   527 00000353 50                      	push 	ax
   528 00000354 53                      	push 	bx
   529 00000355 51                      	push	cx
   530 00000356 52                      	push	dx
   531 00000357 56                      	push	si
   532 00000358 57                      	push	di
   533 00000359 B40C                    	mov    	ah,0ch
   534 0000035B A0[0000]                	mov    	al,[cor]
   535 0000035E B700                    	mov    	bh,0
   536 00000360 BADF01                  	mov    	dx,479
   537 00000363 2B5604                  	sub	dx,[bp+4]
   538 00000366 8B4E06                  	mov    	cx,[bp+6]
   539 00000369 CD10                    	int    	10h
   540 0000036B 5F                      	pop	di
   541 0000036C 5E                      	pop	si
   542 0000036D 5A                      	pop	dx
   543 0000036E 59                      	pop	cx
   544 0000036F 5B                      	pop	bx
   545 00000370 58                      	pop	ax
   546 00000371 9D                      	popf
   547 00000372 5D                      	pop	bp
   548 00000373 C20400                  	ret	4
   549                                  ;_____________________________________________________________________________
   550                                  ;    funÔøΩÔøΩo circle
   551                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   552                                  ; cor definida na variavel cor
   553                                  circle:
   554 00000376 55                      	push 	bp
   555 00000377 89E5                    	mov	bp,sp
   556 00000379 9C                      	pushf                        ;coloca os flags na pilha
   557 0000037A 50                      	push 	ax
   558 0000037B 53                      	push 	bx
   559 0000037C 51                      	push	cx
   560 0000037D 52                      	push	dx
   561 0000037E 56                      	push	si
   562 0000037F 57                      	push	di
   563 00000380 8B4608                  	mov	ax,[bp+8]    ; resgata xc
   564 00000383 8B5E06                  	mov	bx,[bp+6]    ; resgata yc
   565 00000386 8B4E04                  	mov	cx,[bp+4]    ; resgata r
   566 00000389 89DA                    	mov 	dx,bx	
   567 0000038B 01CA                    	add	dx,cx       ;ponto extremo superior
   568 0000038D 50                      	push    ax			
   569 0000038E 52                      	push	dx
   570 0000038F E8BDFF                  	call	plot_xy
   571 00000392 89DA                    	mov	dx,bx
   572 00000394 29CA                    	sub	dx,cx       ;ponto extremo inferior
   573 00000396 50                      	push    ax			
   574 00000397 52                      	push	dx
   575 00000398 E8B4FF                  	call 	plot_xy
   576 0000039B 89C2                    	mov 	dx,ax	
   577 0000039D 01CA                    	add	dx,cx       ;ponto extremo direita
   578 0000039F 52                      	push    dx			
   579 000003A0 53                      	push	bx
   580 000003A1 E8ABFF                  	call	plot_xy
   581 000003A4 89C2                    	mov	dx,ax
   582 000003A6 29CA                    	sub	dx,cx       ;ponto extremo esquerda
   583 000003A8 52                      	push    dx			
   584 000003A9 53                      	push	bx
   585 000003AA E8A2FF                  	call	plot_xy
   586 000003AD 89CF                    	mov	di,cx
   587 000003AF 81EF0100                	sub	di,1	 ;di=r-1
   588 000003B3 BA0000                  	mov	dx,0  	;dx serÔøΩ a variÔøΩvel x. cx ÔøΩ a variavel y
   589                                  	
   590                                  ;aqui em cima a lÔøΩgica foi invertida, 1-r => r-1
   591                                  ;e as comparaÔøΩÔøΩes passaram a ser jl => jg, assim garante 
   592                                  ;valores positivos para d
   593                                  
   594                                  stay:				;loop
   595 000003B6 89FE                    	mov	si,di
   596 000003B8 81FE0000                	cmp	si,0
   597 000003BC 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (nÔøΩo  salta)
   598 000003BE 89D6                    	mov	si,dx		;o jl ÔøΩ importante porque trata-se de conta com sinal
   599 000003C0 D1E6                    	sal	si,1		;multiplica por doi (shift arithmetic left)
   600 000003C2 81C60300                	add	si,3
   601 000003C6 01F7                    	add	di,si     ;nesse ponto d=d+2*dx+3
   602 000003C8 42                      	inc	dx		;incrementa dx
   603 000003C9 E90E00                  	jmp	plotar
   604                                  inf:	
   605 000003CC 89D6                    	mov	si,dx
   606 000003CE 29CE                    	sub	si,cx  		;faz x - y (dx-cx), e salva em di 
   607 000003D0 D1E6                    	sal	si,1
   608 000003D2 81C60500                	add	si,5
   609 000003D6 01F7                    	add	di,si		;nesse ponto d=d+2*(dx-cx)+5
   610 000003D8 42                      	inc	dx		;incrementa x (dx)
   611 000003D9 49                      	dec	cx		;decrementa y (cx)
   612                                  	
   613                                  plotar:	
   614 000003DA 89D6                    	mov	si,dx
   615 000003DC 01C6                    	add	si,ax
   616 000003DE 56                      	push    si			;coloca a abcisa x+xc na pilha
   617 000003DF 89CE                    	mov	si,cx
   618 000003E1 01DE                    	add	si,bx
   619 000003E3 56                      	push    si			;coloca a ordenada y+yc na pilha
   620 000003E4 E868FF                  	call plot_xy		;toma conta do segundo octante
   621 000003E7 89C6                    	mov	si,ax
   622 000003E9 01D6                    	add	si,dx
   623 000003EB 56                      	push    si			;coloca a abcisa xc+x na pilha
   624 000003EC 89DE                    	mov	si,bx
   625 000003EE 29CE                    	sub	si,cx
   626 000003F0 56                      	push    si			;coloca a ordenada yc-y na pilha
   627 000003F1 E85BFF                  	call plot_xy		;toma conta do sÔøΩtimo octante
   628 000003F4 89C6                    	mov	si,ax
   629 000003F6 01CE                    	add	si,cx
   630 000003F8 56                      	push    si			;coloca a abcisa xc+y na pilha
   631 000003F9 89DE                    	mov	si,bx
   632 000003FB 01D6                    	add	si,dx
   633 000003FD 56                      	push    si			;coloca a ordenada yc+x na pilha
   634 000003FE E84EFF                  	call plot_xy		;toma conta do segundo octante
   635 00000401 89C6                    	mov	si,ax
   636 00000403 01CE                    	add	si,cx
   637 00000405 56                      	push    si			;coloca a abcisa xc+y na pilha
   638 00000406 89DE                    	mov	si,bx
   639 00000408 29D6                    	sub	si,dx
   640 0000040A 56                      	push    si			;coloca a ordenada yc-x na pilha
   641 0000040B E841FF                  	call plot_xy		;toma conta do oitavo octante
   642 0000040E 89C6                    	mov	si,ax
   643 00000410 29D6                    	sub	si,dx
   644 00000412 56                      	push    si			;coloca a abcisa xc-x na pilha
   645 00000413 89DE                    	mov	si,bx
   646 00000415 01CE                    	add	si,cx
   647 00000417 56                      	push    si			;coloca a ordenada yc+y na pilha
   648 00000418 E834FF                  	call plot_xy		;toma conta do terceiro octante
   649 0000041B 89C6                    	mov	si,ax
   650 0000041D 29D6                    	sub	si,dx
   651 0000041F 56                      	push    si			;coloca a abcisa xc-x na pilha
   652 00000420 89DE                    	mov	si,bx
   653 00000422 29CE                    	sub	si,cx
   654 00000424 56                      	push    si			;coloca a ordenada yc-y na pilha
   655 00000425 E827FF                  	call plot_xy		;toma conta do sexto octante
   656 00000428 89C6                    	mov	si,ax
   657 0000042A 29CE                    	sub	si,cx
   658 0000042C 56                      	push    si			;coloca a abcisa xc-y na pilha
   659 0000042D 89DE                    	mov	si,bx
   660 0000042F 29D6                    	sub	si,dx
   661 00000431 56                      	push    si			;coloca a ordenada yc-x na pilha
   662 00000432 E81AFF                  	call plot_xy		;toma conta do quinto octante
   663 00000435 89C6                    	mov	si,ax
   664 00000437 29CE                    	sub	si,cx
   665 00000439 56                      	push    si			;coloca a abcisa xc-y na pilha
   666 0000043A 89DE                    	mov	si,bx
   667 0000043C 01D6                    	add	si,dx
   668 0000043E 56                      	push    si			;coloca a ordenada yc-x na pilha
   669 0000043F E80DFF                  	call plot_xy		;toma conta do quarto octante
   670                                  	
   671 00000442 39D1                    	cmp	cx,dx
   672 00000444 7203                    	jb	fim_circle  ;se cx (y) estÔøΩ abaixo de dx (x), termina     
   673 00000446 E96DFF                  	jmp	stay		;se cx (y) estÔøΩ acima de dx (x), continua no loop
   674                                  	
   675                                  	
   676                                  fim_circle:
   677 00000449 5F                      	pop	di
   678 0000044A 5E                      	pop	si
   679 0000044B 5A                      	pop	dx
   680 0000044C 59                      	pop	cx
   681 0000044D 5B                      	pop	bx
   682 0000044E 58                      	pop 	ax
   683 0000044F 9D                      	popf
   684 00000450 5D                      	pop	bp
   685 00000451 C20600                  	ret	6
   686                                  ;-----------------------------------------------------------------------------
   687                                  ;    funÔøΩÔøΩo full_circle
   688                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   689                                  ; cor definida na variavel cor					  
   690                                  full_circle:
   691 00000454 55                      	push 	bp
   692 00000455 89E5                    	mov	 	bp,sp
   693 00000457 9C                      	pushf                        ;coloca os flags na pilha
   694 00000458 50                      	push 	ax
   695 00000459 53                      	push 	bx
   696 0000045A 51                      	push	cx
   697 0000045B 52                      	push	dx
   698 0000045C 56                      	push	si
   699 0000045D 57                      	push	di
   700                                  
   701 0000045E 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   702 00000461 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   703 00000464 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   704                                  	
   705 00000467 89DE                    	mov		si,bx
   706 00000469 29CE                    	sub		si,cx
   707 0000046B 50                      	push    ax			;coloca xc na pilha			
   708 0000046C 56                      	push	si			;coloca yc-r na pilha
   709 0000046D 89DE                    	mov		si,bx
   710 0000046F 01CE                    	add		si,cx
   711 00000471 50                      	push	ax		;coloca xc na pilha
   712 00000472 56                      	push	si		;coloca yc+r na pilha
   713 00000473 E89B00                  	call line
   714                                  	
   715                                  		
   716 00000476 89CF                    	mov		di,cx
   717 00000478 81EF0100                	sub		di,1	 ;di=r-1
   718 0000047C BA0000                  	mov		dx,0  	;dx serÔøΩ a variÔøΩvel x. cx ÔøΩ a variavel y
   719                                  	
   720                                  ;aqui em cima a lÔøΩgica foi invertida, 1-r => r-1
   721                                  ;e as comparaÔøΩÔøΩes passaram a ser jl => jg, assim garante 
   722                                  ;valores positivos para d
   723                                  
   724                                  stay_full:				;loop
   725 0000047F 89FE                    	mov		si,di
   726 00000481 81FE0000                	cmp		si,0
   727 00000485 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (nÔøΩo  salta)
   728 00000487 89D6                    	mov		si,dx		;o jl ÔøΩ importante porque trata-se de conta com sinal
   729 00000489 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   730 0000048B 81C60300                	add		si,3
   731 0000048F 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   732 00000491 42                      	inc		dx		;incrementa dx
   733 00000492 E90E00                  	jmp		plotar_full
   734                                  inf_full:	
   735 00000495 89D6                    	mov		si,dx
   736 00000497 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   737 00000499 D1E6                    	sal		si,1
   738 0000049B 81C60500                	add		si,5
   739 0000049F 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   740 000004A1 42                      	inc		dx		;incrementa x (dx)
   741 000004A2 49                      	dec		cx		;decrementa y (cx)
   742                                  	
   743                                  plotar_full:	
   744 000004A3 89C6                    	mov		si,ax
   745 000004A5 01CE                    	add		si,cx
   746 000004A7 56                      	push	si		;coloca a abcisa y+xc na pilha			
   747 000004A8 89DE                    	mov		si,bx
   748 000004AA 29D6                    	sub		si,dx
   749 000004AC 56                      	push    si		;coloca a ordenada yc-x na pilha
   750 000004AD 89C6                    	mov		si,ax
   751 000004AF 01CE                    	add		si,cx
   752 000004B1 56                      	push	si		;coloca a abcisa y+xc na pilha	
   753 000004B2 89DE                    	mov		si,bx
   754 000004B4 01D6                    	add		si,dx
   755 000004B6 56                      	push    si		;coloca a ordenada yc+x na pilha	
   756 000004B7 E85700                  	call 	line
   757                                  	
   758 000004BA 89C6                    	mov		si,ax
   759 000004BC 01D6                    	add		si,dx
   760 000004BE 56                      	push	si		;coloca a abcisa xc+x na pilha			
   761 000004BF 89DE                    	mov		si,bx
   762 000004C1 29CE                    	sub		si,cx
   763 000004C3 56                      	push    si		;coloca a ordenada yc-y na pilha
   764 000004C4 89C6                    	mov		si,ax
   765 000004C6 01D6                    	add		si,dx
   766 000004C8 56                      	push	si		;coloca a abcisa xc+x na pilha	
   767 000004C9 89DE                    	mov		si,bx
   768 000004CB 01CE                    	add		si,cx
   769 000004CD 56                      	push    si		;coloca a ordenada yc+y na pilha	
   770 000004CE E84000                  	call	line
   771                                  	
   772 000004D1 89C6                    	mov		si,ax
   773 000004D3 29D6                    	sub		si,dx
   774 000004D5 56                      	push	si		;coloca a abcisa xc-x na pilha			
   775 000004D6 89DE                    	mov		si,bx
   776 000004D8 29CE                    	sub		si,cx
   777 000004DA 56                      	push    si		;coloca a ordenada yc-y na pilha
   778 000004DB 89C6                    	mov		si,ax
   779 000004DD 29D6                    	sub		si,dx
   780 000004DF 56                      	push	si		;coloca a abcisa xc-x na pilha	
   781 000004E0 89DE                    	mov		si,bx
   782 000004E2 01CE                    	add		si,cx
   783 000004E4 56                      	push    si		;coloca a ordenada yc+y na pilha	
   784 000004E5 E82900                  	call	line
   785                                  	
   786 000004E8 89C6                    	mov		si,ax
   787 000004EA 29CE                    	sub		si,cx
   788 000004EC 56                      	push	si		;coloca a abcisa xc-y na pilha			
   789 000004ED 89DE                    	mov		si,bx
   790 000004EF 29D6                    	sub		si,dx
   791 000004F1 56                      	push    si		;coloca a ordenada yc-x na pilha
   792 000004F2 89C6                    	mov		si,ax
   793 000004F4 29CE                    	sub		si,cx
   794 000004F6 56                      	push	si		;coloca a abcisa xc-y na pilha	
   795 000004F7 89DE                    	mov		si,bx
   796 000004F9 01D6                    	add		si,dx
   797 000004FB 56                      	push    si		;coloca a ordenada yc+x na pilha	
   798 000004FC E81200                  	call	line
   799                                  	
   800 000004FF 39D1                    	cmp		cx,dx
   801 00000501 7203                    	jb		fim_full_circle  ;se cx (y) estÔøΩ abaixo de dx (x), termina     
   802 00000503 E979FF                  	jmp		stay_full		;se cx (y) estÔøΩ acima de dx (x), continua no loop
   803                                  	
   804                                  	
   805                                  fim_full_circle:
   806 00000506 5F                      	pop		di
   807 00000507 5E                      	pop		si
   808 00000508 5A                      	pop		dx
   809 00000509 59                      	pop		cx
   810 0000050A 5B                      	pop		bx
   811 0000050B 58                      	pop		ax
   812 0000050C 9D                      	popf
   813 0000050D 5D                      	pop		bp
   814 0000050E C20600                  	ret		6
   815                                  ;-----------------------------------------------------------------------------
   816                                  ;
   817                                  ;   funÔøΩÔøΩo line
   818                                  ;
   819                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   820                                  line:
   821 00000511 55                      	push		bp
   822 00000512 89E5                    	mov		bp,sp
   823 00000514 9C                      	pushf                        ;coloca os flags na pilha
   824 00000515 50                      	push 		ax
   825 00000516 53                      	push 		bx
   826 00000517 51                      	push		cx
   827 00000518 52                      	push		dx
   828 00000519 56                      	push		si
   829 0000051A 57                      	push		di
   830 0000051B 8B460A                  	mov		ax,[bp+10]   ; resgata os valores das coordenadas
   831 0000051E 8B5E08                  	mov		bx,[bp+8]    ; resgata os valores das coordenadas
   832 00000521 8B4E06                  	mov		cx,[bp+6]    ; resgata os valores das coordenadas
   833 00000524 8B5604                  	mov		dx,[bp+4]    ; resgata os valores das coordenadas
   834 00000527 39C8                    	cmp		ax,cx
   835 00000529 7408                    	je		line2
   836 0000052B 721C                    	jb		line1
   837 0000052D 91                      	xchg		ax,cx
   838 0000052E 87DA                    	xchg		bx,dx
   839 00000530 E91600                  	jmp		line1
   840                                  line2:		; deltax=0
   841 00000533 39D3                    	cmp		bx,dx  ;subtrai dx de bx
   842 00000535 7202                    	jb		line3
   843 00000537 87DA                    	xchg		bx,dx        ;troca os valores de bx e dx entre eles
   844                                  line3:	; dx > bx
   845 00000539 50                      	push		ax
   846 0000053A 53                      	push		bx
   847 0000053B E811FE                  	call 		plot_xy
   848 0000053E 39D3                    	cmp		bx,dx
   849 00000540 7503                    	jne		line31
   850 00000542 E9C600                  	jmp		fim_line
   851 00000545 43                      line31:	inc		bx
   852 00000546 E9F0FF                  	jmp		line3
   853                                  ;deltax <>0
   854                                  line1:
   855                                  ; comparar mÔøΩdulos de deltax e deltay sabendo que cx>ax
   856                                  	; cx > ax
   857 00000549 51                      		push		cx
   858 0000054A 29C1                    		sub		cx,ax
   859 0000054C 890E[0600]              		mov		[deltax],cx
   860 00000550 59                      		pop		cx
   861 00000551 52                      		push		dx
   862 00000552 29DA                    		sub		dx,bx
   863 00000554 7702                    		ja		line32
   864 00000556 F7DA                    		neg		dx
   865                                  line32:		
   866 00000558 8916[0800]              		mov		[deltay],dx
   867 0000055C 5A                      		pop		dx
   868                                  
   869 0000055D 50                      		push		ax
   870 0000055E A1[0600]                		mov		ax,[deltax]
   871 00000561 3B06[0800]              		cmp		ax,[deltay]
   872 00000565 58                      		pop		ax
   873 00000566 724D                    		jb		line5
   874                                  
   875                                  	; cx > ax e deltax>deltay
   876 00000568 51                      		push		cx
   877 00000569 29C1                    		sub		cx,ax
   878 0000056B 890E[0600]              		mov		[deltax],cx
   879 0000056F 59                      		pop		cx
   880 00000570 52                      		push		dx
   881 00000571 29DA                    		sub		dx,bx
   882 00000573 8916[0800]              		mov		[deltay],dx
   883 00000577 5A                      		pop		dx
   884                                  
   885 00000578 89C6                    		mov		si,ax
   886                                  line4:
   887 0000057A 50                      		push		ax
   888 0000057B 52                      		push		dx
   889 0000057C 56                      		push		si
   890 0000057D 29C6                    		sub		si,ax	;(x-x1)
   891 0000057F A1[0800]                		mov		ax,[deltay]
   892 00000582 F7EE                    		imul		si
   893 00000584 8B36[0600]              		mov		si,[deltax]		;arredondar
   894 00000588 D1EE                    		shr		si,1
   895                                  ; se numerador (DX)>0 soma se <0 subtrai
   896 0000058A 81FA0000                		cmp		dx,0
   897 0000058E 7C09                    		jl		ar1
   898 00000590 01F0                    		add		ax,si
   899 00000592 81D20000                		adc		dx,0
   900 00000596 E90600                  		jmp		arc1
   901 00000599 29F0                    ar1:		sub		ax,si
   902 0000059B 81DA0000                		sbb		dx,0
   903                                  arc1:
   904 0000059F F73E[0600]              		idiv		word [deltax]
   905 000005A3 01D8                    		add		ax,bx
   906 000005A5 5E                      		pop		si
   907 000005A6 56                      		push		si
   908 000005A7 50                      		push		ax
   909 000005A8 E8A4FD                  		call		plot_xy
   910 000005AB 5A                      		pop		dx
   911 000005AC 58                      		pop		ax
   912 000005AD 39CE                    		cmp		si,cx
   913 000005AF 745A                    		je		fim_line
   914 000005B1 46                      		inc		si
   915 000005B2 E9C5FF                  		jmp		line4
   916                                  
   917 000005B5 39D3                    line5:		cmp		bx,dx
   918 000005B7 7203                    		jb 		line7
   919 000005B9 91                      		xchg		ax,cx
   920 000005BA 87DA                    		xchg		bx,dx
   921                                  line7:
   922 000005BC 51                      	push cx
   923 000005BD 29C1                    	sub cx,ax
   924 000005BF 890E[0600]              	mov  [deltax],cx
   925 000005C3 59                      	pop  cx
   926 000005C4 52                      	push dx
   927 000005C5 29DA                    	sub dx,bx
   928 000005C7 8916[0800]              	mov [deltay],dx
   929 000005CB 5A                      	pop dx
   930 000005CC 89DE                    	mov si,bx
   931                                  line6:
   932 000005CE 52                      	push dx
   933 000005CF 56                      	push si
   934 000005D0 50                      	push ax
   935 000005D1 29DE                    	sub  si,bx	;(y-y1)
   936 000005D3 A1[0600]                	mov  ax,[deltax]
   937 000005D6 F7EE                    	imul si
   938 000005D8 8B36[0800]              	mov  si,[deltay]		;arredondar
   939 000005DC D1EE                    	shr  si,1
   940                                  ; se numerador (DX)>0 soma se <0 subtrai
   941 000005DE 81FA0000                	cmp  dx,0
   942 000005E2 7C09                    	jl   ar2
   943 000005E4 01F0                    	add  ax,si
   944 000005E6 81D20000                	adc  dx,0
   945 000005EA E90600                  	jmp  arc2
   946                                  ar2:	
   947 000005ED 29F0                    	sub ax, si
   948 000005EF 81DA0000                	sbb dx, 0
   949                                  arc2:
   950 000005F3 F73E[0800]              	idiv word [deltay]
   951 000005F7 89C7                    	mov di, ax
   952 000005F9 58                      	pop ax
   953 000005FA 01C7                    	add di, ax
   954 000005FC 5E                      	pop si
   955 000005FD 57                      	push di
   956 000005FE 56                      	push si
   957 000005FF E84DFD                  	call plot_xy
   958 00000602 5A                      	pop dx
   959 00000603 39D6                    	cmp si, dx
   960 00000605 7404                    	je  fim_line
   961 00000607 46                      	inc si
   962 00000608 E9C3FF                  	jmp line6
   963                                  
   964                                  fim_line:
   965 0000060B 5F                      	pop di
   966 0000060C 5E                      	pop si
   967 0000060D 5A                      	pop dx
   968 0000060E 59                      	pop cx
   969 0000060F 5B                      	pop bx
   970 00000610 58                      	pop ax
   971 00000611 9D                      	popf
   972 00000612 5D                      	pop bp
   973 00000613 C20800                  	ret 8
   974                                  ;*******************************************************************
   975                                  segment data
   976 00000000 0F                      cor      	db		branco_intenso
   977                                  ; I R G B COR
   978                                  ; 0 0 0 0 preto
   979                                  ; 0 0 0 1 azul
   980                                  ; 0 0 1 0 verde
   981                                  ; 0 0 1 1 cyan
   982                                  ; 0 1 0 0 vermelho
   983                                  ; 0 1 0 1 magenta
   984                                  ; 0 1 1 0 marrom
   985                                  ; 0 1 1 1 branco
   986                                  ; 1 0 0 0 cinza
   987                                  ; 1 0 0 1 azul claro
   988                                  ; 1 0 1 0 verde claro
   989                                  ; 1 0 1 1 cyan claro
   990                                  ; 1 1 0 0 rosa
   991                                  ; 1 1 0 1 magenta claro
   992                                  ; 1 1 1 0 amarelo
   993                                  ; 1 1 1 1 branco intenso
   994                                  
   995                                  preto		equ		0
   996                                  azul		equ		1
   997                                  verde		equ		2
   998                                  cyan		equ		3
   999                                  vermelho	equ		4
  1000                                  magenta		equ		5
  1001                                  marrom		equ		6
  1002                                  branco		equ		7
  1003                                  cinza		equ		8
  1004                                  azul_claro	equ		9
  1005                                  verde_claro	equ		10
  1006                                  cyan_claro	equ		11
  1007                                  rosa		equ		12
  1008                                  magenta_claro	equ		13
  1009                                  amarelo		equ		14
  1010                                  branco_intenso	equ		15
  1011                                  
  1012 00000001 00                      modo_anterior	db		0
  1013 00000002 0000                    linha   	dw  		0
  1014 00000004 0000                    coluna  	dw  		0
  1015 00000006 0000                    deltax		dw		0
  1016 00000008 0000                    deltay		dw		0	
  1017 0000000A 414252495224            abrir    	db  		'ABRIR$'
  1018 00000010 5341495224              sair    	db  		'SAIR$'
  1019 00000015 4849535424              hist    	db  		'HIST$'
  1020 0000001A 48495354455124          eqhist    	db  		'HISTEQ$'
  1021 00000021 484953544F4752414D-     txeqhist    	db  		'HISTOGRAMA ORIGINAL$'
  1022 0000002A 41204F524947494E41-
  1023 00000033 4C24               
  1024 00000035 484953544F4752414D-     txhist    	db  		'HISTOGRAMA EQUALIZADO$'
  1025 0000003E 4120455155414C495A-
  1026 00000047 41444F24           
  1027 0000004B 524F444F4C464F2056-     nome    	db  		'RODOLFO VALENTIM$'
  1028 00000054 414C454E54494D24   
  1029 0000005C 53495354454D415320-     disc    	db  		'SISTEMAS EMBARCADOS 2016/1$'
  1030 00000065 454D4241524341444F-
  1031 0000006E 5320323031362F3124 
  1032 00000077 696D6167656D2E7478-     filename	db		'imagem.txt', 0
  1033 00000080 7400               
  1034 00000082 00                      buffer		db		0
  1035 00000083 0000                    handle 		dw 		0
  1036 00000085 00                      input		db		0
  1037 00000086 0000<rept>              histogram:	times		256 dw 0
  1038 00000286 0000<rept>              cfd:		times		256 dw 0
  1039 00000486 0000<rept>              eqhistogram: 	times		256 dw 0
  1040 00000686 <res 0000F424>          image:		resb  		62500
  1041                                  
  1042                                  ;*************************************************************************
  1043                                  
  1044                                  segment stack stack
  1045 00000000 <res 00000100>             		resb 		256
  1046                                  stacktop:
  1047                                  
  1048                                  

     1                                  ; Rodolfo Vieira Valentim
     2                                  ; Sistemas Embarcados 2016/1
     3                                  
     4                                  %macro drawline 5 		;x1,y1,x2,y2,color
     5                                  	mov	ax,%1
     6                                  	push	ax
     7                                  	mov	ax,%2
     8                                  	push	ax
     9                                  	mov	ax,%3
    10                                  	push	ax
    11                                  	mov	ax,%4
    12                                  	push	ax
    13                                  	mov	byte[cor],%5
    14                                  	call	line
    15                                  %endmacro
    16                                  
    17                                  %macro ponto 2			; x,y,color
    18                                  	add %1, 3
    19                                  	add %2, 100
    20                                  	push %1
    21                                  	push %2	
    22                                  	call plot_xy
    23                                  	sub %1, 3
    24                                  	sub %2, 100
    25                                  %endmacro
    26                                  
    27                                  %macro writeword 3
    28                                      	mov     bx,0
    29                                      	mov     dh,%2			;linha 0-29
    30                                      	mov     dl,%3			;coluna 0-79
    31                                  %%local:
    32                                  	call	cursor
    33                                      	mov     al,[bx+%1]
    34                                  	cmp	al, '$'
    35                                  	je	%%exit
    36                                  	call	caracter
    37                                      	inc     bx			;proximo caracter
    38                                  	inc	dl			;avanca a coluna
    39                                      	jmp	%%local
    40                                  %%exit:
    41                                  %endmacro
    42                                  
    43                                  segment code
    44                                  ..start:
    45 00000000 B8[0000]                    	mov ax,data
    46 00000003 8ED8                        	mov ds,ax
    47 00000005 B8[0000]                    	mov ax,stack
    48 00000008 8ED0                        	mov ss,ax
    49 0000000A BC[0001]                    	mov sp,stacktop
    50                                  
    51                                  	;abre arquivo
    52 0000000D B43D                    	mov ah, 3Dh
    53 0000000F B000                    	mov al, 00
    54 00000011 BA[7700]                	mov dx, filename
    55 00000014 B90100                  	mov cx, 1
    56 00000017 CD21                    	int 21h	
    57                                  
    58 00000019 A3[8300]                	mov word[handle], ax
    59 0000001C BE[8604]                	mov si, image
    60                                  
    61                                  read:
    62 0000001F B43F                     	mov ah, 3Fh
    63 00000021 8B1E[8300]              	mov bx, word[handle]
    64 00000025 B90100                  	mov cx, 1
    65 00000028 BA[8500]                	mov dx, input
    66 0000002B CD21                    	int 21h
    67                                  
    68                                  	;verifica se o arquivo acabou	
    69 0000002D 39C8                    	cmp ax, cx
    70 0000002F 7C2A                    	jl finishread
    71                                  	
    72                                  	;compara com o espaço
    73 00000031 8A16[8500]              	mov dl, byte[input]
    74 00000035 80FA20                  	cmp dl, 20h
    75 00000038 7412                    	je store
    76                                  
    77                                  	;cmp dl, '0'
    78                                  	;jl finishread
    79                                  
    80 0000003A A0[8200]                	mov al, byte[buffer]
    81 0000003D 80EA30                  	sub dl, '0'
    82 00000040 B30A                    	mov bl, 0ah
    83 00000042 F6E3                    	mul bl
    84 00000044 00D0                    	add al, dl
    85 00000046 A2[8200]                	mov byte[buffer], al
    86 00000049 E9D3FF                  	jmp read
    87                                  	
    88                                  store:
    89 0000004C 8A16[8200]              	mov dl, byte[buffer]
    90 00000050 8814                    	mov byte[si], dl
    91 00000052 46                      	inc si
    92 00000053 C606[8200]00            	mov byte[buffer], 00h
    93 00000058 E9C4FF                  	jmp read
    94                                  
    95                                  finishread:
    96                                  	; termina a leitura da imagem
    97 0000005B 8A16[8200]              	mov dl, [buffer]	
    98 0000005F 8814                    	mov byte[si], dl
    99 00000061 46                      	inc si
   100 00000062 C60424                  	mov byte[si], '$'
   101                                  
   102                                  ; salvar modo corrente de video(vendo como esta o modo de video da maquina)
   103 00000065 B40F                            mov 	ah,0Fh
   104 00000067 CD10                        	int 	10h
   105 00000069 A2[0100]                    	mov 	[modo_anterior],al   
   106                                  
   107                                  ; alterar modo de video para gr�fico 640x480 16 cores
   108 0000006C B012                        	mov    	al,12h
   109 0000006E B400                       	mov    	ah,0
   110 00000070 CD10                        	int    	10h
   111                                  	
   112                                  ;escrever uma mensagem
   113                                  
   114                                  	drawline 255, 0, 255, 479, branco_intenso
   115 00000072 B8FF00              <1> 	mov	ax,%1
   116 00000075 50                  <1> 	push	ax
   117 00000076 B80000              <1> 	mov	ax,%2
   118 00000079 50                  <1> 	push	ax
   119 0000007A B8FF00              <1> 	mov	ax,%3
   120 0000007D 50                  <1> 	push	ax
   121 0000007E B8DF01              <1> 	mov	ax,%4
   122 00000081 50                  <1> 	push	ax
   123 00000082 C606[0000]0F        <1> 	mov	byte[cor],%5
   124 00000087 E8B303              <1> 	call	line
   125                                  	drawline 255, 239, 639, 239, branco_intenso
   126 0000008A B8FF00              <1> 	mov	ax,%1
   127 0000008D 50                  <1> 	push	ax
   128 0000008E B8EF00              <1> 	mov	ax,%2
   129 00000091 50                  <1> 	push	ax
   130 00000092 B87F02              <1> 	mov	ax,%3
   131 00000095 50                  <1> 	push	ax
   132 00000096 B8EF00              <1> 	mov	ax,%4
   133 00000099 50                  <1> 	push	ax
   134 0000009A C606[0000]0F        <1> 	mov	byte[cor],%5
   135 0000009F E89B03              <1> 	call	line
   136                                  	drawline 63, 479, 63, 431, branco_intenso
   137 000000A2 B83F00              <1> 	mov	ax,%1
   138 000000A5 50                  <1> 	push	ax
   139 000000A6 B8DF01              <1> 	mov	ax,%2
   140 000000A9 50                  <1> 	push	ax
   141 000000AA B83F00              <1> 	mov	ax,%3
   142 000000AD 50                  <1> 	push	ax
   143 000000AE B8AF01              <1> 	mov	ax,%4
   144 000000B1 50                  <1> 	push	ax
   145 000000B2 C606[0000]0F        <1> 	mov	byte[cor],%5
   146 000000B7 E88303              <1> 	call	line
   147                                  	drawline 127, 479, 127, 431, branco_intenso
   148 000000BA B87F00              <1> 	mov	ax,%1
   149 000000BD 50                  <1> 	push	ax
   150 000000BE B8DF01              <1> 	mov	ax,%2
   151 000000C1 50                  <1> 	push	ax
   152 000000C2 B87F00              <1> 	mov	ax,%3
   153 000000C5 50                  <1> 	push	ax
   154 000000C6 B8AF01              <1> 	mov	ax,%4
   155 000000C9 50                  <1> 	push	ax
   156 000000CA C606[0000]0F        <1> 	mov	byte[cor],%5
   157 000000CF E86B03              <1> 	call	line
   158                                  	drawline 191, 479, 191, 431, branco_intenso
   159 000000D2 B8BF00              <1> 	mov	ax,%1
   160 000000D5 50                  <1> 	push	ax
   161 000000D6 B8DF01              <1> 	mov	ax,%2
   162 000000D9 50                  <1> 	push	ax
   163 000000DA B8BF00              <1> 	mov	ax,%3
   164 000000DD 50                  <1> 	push	ax
   165 000000DE B8AF01              <1> 	mov	ax,%4
   166 000000E1 50                  <1> 	push	ax
   167 000000E2 C606[0000]0F        <1> 	mov	byte[cor],%5
   168 000000E7 E85303              <1> 	call	line
   169                                  	drawline 0, 431, 255, 431, branco_intenso
   170 000000EA B80000              <1> 	mov	ax,%1
   171 000000ED 50                  <1> 	push	ax
   172 000000EE B8AF01              <1> 	mov	ax,%2
   173 000000F1 50                  <1> 	push	ax
   174 000000F2 B8FF00              <1> 	mov	ax,%3
   175 000000F5 50                  <1> 	push	ax
   176 000000F6 B8AF01              <1> 	mov	ax,%4
   177 000000F9 50                  <1> 	push	ax
   178 000000FA C606[0000]0F        <1> 	mov	byte[cor],%5
   179 000000FF E83B03              <1> 	call	line
   180                                  	drawline 0, 63, 255, 63, branco_intenso
   181 00000102 B80000              <1> 	mov	ax,%1
   182 00000105 50                  <1> 	push	ax
   183 00000106 B83F00              <1> 	mov	ax,%2
   184 00000109 50                  <1> 	push	ax
   185 0000010A B8FF00              <1> 	mov	ax,%3
   186 0000010D 50                  <1> 	push	ax
   187 0000010E B83F00              <1> 	mov	ax,%4
   188 00000111 50                  <1> 	push	ax
   189 00000112 C606[0000]0F        <1> 	mov	byte[cor],%5
   190 00000117 E82303              <1> 	call	line
   191                                  
   192                                  	writeword abrir, 1, 1
   193 0000011A BB0000              <1>     	mov     bx,0
   194 0000011D B601                <1>     	mov     dh,%2
   195 0000011F B201                <1>     	mov     dl,%3
   196                              <1> %%local:
   197 00000121 E82201              <1> 	call	cursor
   198 00000124 8A87[0A00]          <1>     	mov     al,[bx+%1]
   199 00000128 3C24                <1> 	cmp	al, '$'
   200 0000012A 7409                <1> 	je	%%exit
   201 0000012C E82E01              <1> 	call	caracter
   202 0000012F 43                  <1>     	inc     bx
   203 00000130 FEC2                <1> 	inc	dl
   204 00000132 E9ECFF              <1>     	jmp	%%local
   205                              <1> %%exit:
   206                                  	writeword sair, 1, 10
   207 00000135 BB0000              <1>     	mov     bx,0
   208 00000138 B601                <1>     	mov     dh,%2
   209 0000013A B20A                <1>     	mov     dl,%3
   210                              <1> %%local:
   211 0000013C E80701              <1> 	call	cursor
   212 0000013F 8A87[1000]          <1>     	mov     al,[bx+%1]
   213 00000143 3C24                <1> 	cmp	al, '$'
   214 00000145 7409                <1> 	je	%%exit
   215 00000147 E81301              <1> 	call	caracter
   216 0000014A 43                  <1>     	inc     bx
   217 0000014B FEC2                <1> 	inc	dl
   218 0000014D E9ECFF              <1>     	jmp	%%local
   219                              <1> %%exit:
   220                                  	writeword hist, 1, 18
   221 00000150 BB0000              <1>     	mov     bx,0
   222 00000153 B601                <1>     	mov     dh,%2
   223 00000155 B212                <1>     	mov     dl,%3
   224                              <1> %%local:
   225 00000157 E8EC00              <1> 	call	cursor
   226 0000015A 8A87[1500]          <1>     	mov     al,[bx+%1]
   227 0000015E 3C24                <1> 	cmp	al, '$'
   228 00000160 7409                <1> 	je	%%exit
   229 00000162 E8F800              <1> 	call	caracter
   230 00000165 43                  <1>     	inc     bx
   231 00000166 FEC2                <1> 	inc	dl
   232 00000168 E9ECFF              <1>     	jmp	%%local
   233                              <1> %%exit:
   234                                  	writeword eqhist, 1, 25
   235 0000016B BB0000              <1>     	mov     bx,0
   236 0000016E B601                <1>     	mov     dh,%2
   237 00000170 B219                <1>     	mov     dl,%3
   238                              <1> %%local:
   239 00000172 E8D100              <1> 	call	cursor
   240 00000175 8A87[1A00]          <1>     	mov     al,[bx+%1]
   241 00000179 3C24                <1> 	cmp	al, '$'
   242 0000017B 7409                <1> 	je	%%exit
   243 0000017D E8DD00              <1> 	call	caracter
   244 00000180 43                  <1>     	inc     bx
   245 00000181 FEC2                <1> 	inc	dl
   246 00000183 E9ECFF              <1>     	jmp	%%local
   247                              <1> %%exit:
   248                                  	writeword txhist, 1, 33
   249 00000186 BB0000              <1>     	mov     bx,0
   250 00000189 B601                <1>     	mov     dh,%2
   251 0000018B B221                <1>     	mov     dl,%3
   252                              <1> %%local:
   253 0000018D E8B600              <1> 	call	cursor
   254 00000190 8A87[3500]          <1>     	mov     al,[bx+%1]
   255 00000194 3C24                <1> 	cmp	al, '$'
   256 00000196 7409                <1> 	je	%%exit
   257 00000198 E8C200              <1> 	call	caracter
   258 0000019B 43                  <1>     	inc     bx
   259 0000019C FEC2                <1> 	inc	dl
   260 0000019E E9ECFF              <1>     	jmp	%%local
   261                              <1> %%exit:
   262                                  	writeword txeqhist, 16, 33
   263 000001A1 BB0000              <1>     	mov     bx,0
   264 000001A4 B610                <1>     	mov     dh,%2
   265 000001A6 B221                <1>     	mov     dl,%3
   266                              <1> %%local:
   267 000001A8 E89B00              <1> 	call	cursor
   268 000001AB 8A87[2100]          <1>     	mov     al,[bx+%1]
   269 000001AF 3C24                <1> 	cmp	al, '$'
   270 000001B1 7409                <1> 	je	%%exit
   271 000001B3 E8A700              <1> 	call	caracter
   272 000001B6 43                  <1>     	inc     bx
   273 000001B7 FEC2                <1> 	inc	dl
   274 000001B9 E9ECFF              <1>     	jmp	%%local
   275                              <1> %%exit:
   276                                  	writeword nome, 27, 1
   277 000001BC BB0000              <1>     	mov     bx,0
   278 000001BF B61B                <1>     	mov     dh,%2
   279 000001C1 B201                <1>     	mov     dl,%3
   280                              <1> %%local:
   281 000001C3 E88000              <1> 	call	cursor
   282 000001C6 8A87[4B00]          <1>     	mov     al,[bx+%1]
   283 000001CA 3C24                <1> 	cmp	al, '$'
   284 000001CC 7409                <1> 	je	%%exit
   285 000001CE E88C00              <1> 	call	caracter
   286 000001D1 43                  <1>     	inc     bx
   287 000001D2 FEC2                <1> 	inc	dl
   288 000001D4 E9ECFF              <1>     	jmp	%%local
   289                              <1> %%exit:
   290                                  	writeword disc, 28, 1
   291 000001D7 BB0000              <1>     	mov     bx,0
   292 000001DA B61C                <1>     	mov     dh,%2
   293 000001DC B201                <1>     	mov     dl,%3
   294                              <1> %%local:
   295 000001DE E86500              <1> 	call	cursor
   296 000001E1 8A87[5C00]          <1>     	mov     al,[bx+%1]
   297 000001E5 3C24                <1> 	cmp	al, '$'
   298 000001E7 7409                <1> 	je	%%exit
   299 000001E9 E87100              <1> 	call	caracter
   300 000001EC 43                  <1>     	inc     bx
   301 000001ED FEC2                <1> 	inc	dl
   302 000001EF E9ECFF              <1>     	jmp	%%local
   303                              <1> %%exit:
   304                                  
   305 000001F2 BE0000                  	mov si, 0  	; x
   306 000001F5 BFF900                  	mov di, 249	; y
   307 000001F8 BB[8604]                	mov bx, image
   308 000001FB CD03                    	int 3
   309                                  	
   310 000001FD 81FF0000                L3:	cmp di, 0
   311 00000201 7434                    	je FL3
   312 00000203 B400                    	mov ah, 00h
   313 00000205 8A07                    	mov al, byte[bx]
   314 00000207 C0E804                  	shr al, 4
   315 0000020A A2[0000]                	mov byte[cor], al	
   316                                  	ponto si, di
   317 0000020D 81C60300            <1> 	add %1, 3
   318 00000211 81C76400            <1> 	add %2, 100
   319 00000215 56                  <1> 	push %1
   320 00000216 57                  <1> 	push %2
   321 00000217 E86100              <1> 	call plot_xy
   322 0000021A 81EE0300            <1> 	sub %1, 3
   323 0000021E 81EF6400            <1> 	sub %2, 100
   324 00000222 46                      	inc si
   325 00000223 43                      	inc bx	
   326 00000224 81FEFA00                	cmp si, 250
   327 00000228 7403                    	je RCAX
   328 0000022A E9D0FF                  	jmp L3
   329                                  RCAX:	 
   330 0000022D BE0000                  	mov si, 0
   331 00000230 81EF0100                	sub di, 1
   332 00000234 E9C6FF                  	jmp L3
   333                                  FL3:	
   334                                  
   335 00000237 B408                    	mov ah,08h
   336 00000239 CD21                    	int 21h
   337 0000023B B400                    	mov ah,0   			; set video mode
   338 0000023D A0[0100]                	mov al,[modo_anterior]   	; modo anterior
   339 00000240 CD10                    	int 10h
   340                                  
   341 00000242 B44C                    	mov ah, 4Ch
   342 00000244 CD21                    	int 21h
   343                                  ;***************************************************************************
   344                                  ; função cursor
   345                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   346                                  ;***************************************************************************
   347                                  cursor:
   348 00000246 9C                      	pushf
   349 00000247 50                      	push 	ax
   350 00000248 53                      	push 	bx
   351 00000249 51                      	push	cx
   352 0000024A 52                      	push	dx
   353 0000024B 56                      	push	si
   354 0000024C 57                      	push	di
   355 0000024D 55                      	push	bp
   356 0000024E B402                    	mov    	ah,2
   357 00000250 B700                    	mov    	bh,0
   358 00000252 CD10                    	int    	10h
   359 00000254 5D                      	pop	bp
   360 00000255 5F                      	pop	di
   361 00000256 5E                      	pop	si
   362 00000257 5A                      	pop	dx
   363 00000258 59                      	pop	cx
   364 00000259 5B                      	pop	bx
   365 0000025A 58                      	pop	ax
   366 0000025B 9D                      	popf
   367 0000025C C3                      	ret
   368                                  ;_____________________________________________________________________________
   369                                  ;
   370                                  ;   fun��o caracter escrito na posi��o do cursor
   371                                  ;
   372                                  ; al= caracter a ser escrito
   373                                  ; cor definida na variavel cor
   374                                  caracter:
   375 0000025D 9C                      	pushf
   376 0000025E 50                      	push	ax
   377 0000025F 53                      	push	bx
   378 00000260 51                      	push	cx
   379 00000261 52                      	push	dx
   380 00000262 56                      	push	si
   381 00000263 57                      	push	di
   382 00000264 55                      	push	bp
   383 00000265 B409                        	mov    	ah,9
   384 00000267 B700                        	mov    	bh,0
   385 00000269 B90100                      	mov    	cx,1
   386 0000026C 8A1E[0000]                 	mov    	bl,[cor]
   387 00000270 CD10                        	int    	10h
   388 00000272 5D                      	pop	bp
   389 00000273 5F                      	pop	di
   390 00000274 5E                      	pop	si
   391 00000275 5A                      	pop	dx
   392 00000276 59                      	pop	cx
   393 00000277 5B                      	pop	bx
   394 00000278 58                      	pop	ax
   395 00000279 9D                      	popf
   396 0000027A C3                      	ret
   397                                  ;_____________________________________________________________________________
   398                                  ;
   399                                  ;   função plot_xy
   400                                  ;
   401                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   402                                  ; cor definida na variavel cor
   403                                  plot_xy:
   404 0000027B 55                      	push	bp
   405 0000027C 89E5                    	mov	bp,sp
   406 0000027E 9C                      	pushf
   407 0000027F 50                      	push 	ax
   408 00000280 53                      	push 	bx
   409 00000281 51                      	push	cx
   410 00000282 52                      	push	dx
   411 00000283 56                      	push	si
   412 00000284 57                      	push	di
   413 00000285 B40C                    	mov    	ah,0ch
   414 00000287 A0[0000]                	mov    	al,[cor]
   415 0000028A B700                    	mov    	bh,0
   416 0000028C BADF01                  	mov    	dx,479
   417 0000028F 2B5604                  	sub	dx,[bp+4]
   418 00000292 8B4E06                  	mov    	cx,[bp+6]
   419 00000295 CD10                    	int    	10h
   420 00000297 5F                      	pop	di
   421 00000298 5E                      	pop	si
   422 00000299 5A                      	pop	dx
   423 0000029A 59                      	pop	cx
   424 0000029B 5B                      	pop	bx
   425 0000029C 58                      	pop	ax
   426 0000029D 9D                      	popf
   427 0000029E 5D                      	pop	bp
   428 0000029F C20400                  	ret	4
   429                                  ;_____________________________________________________________________________
   430                                  ;    fun��o circle
   431                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   432                                  ; cor definida na variavel cor
   433                                  circle:
   434 000002A2 55                      	push 	bp
   435 000002A3 89E5                    	mov	bp,sp
   436 000002A5 9C                      	pushf                        ;coloca os flags na pilha
   437 000002A6 50                      	push 	ax
   438 000002A7 53                      	push 	bx
   439 000002A8 51                      	push	cx
   440 000002A9 52                      	push	dx
   441 000002AA 56                      	push	si
   442 000002AB 57                      	push	di
   443 000002AC 8B4608                  	mov	ax,[bp+8]    ; resgata xc
   444 000002AF 8B5E06                  	mov	bx,[bp+6]    ; resgata yc
   445 000002B2 8B4E04                  	mov	cx,[bp+4]    ; resgata r
   446 000002B5 89DA                    	mov 	dx,bx	
   447 000002B7 01CA                    	add	dx,cx       ;ponto extremo superior
   448 000002B9 50                      	push    ax			
   449 000002BA 52                      	push	dx
   450 000002BB E8BDFF                  	call	plot_xy
   451 000002BE 89DA                    	mov	dx,bx
   452 000002C0 29CA                    	sub	dx,cx       ;ponto extremo inferior
   453 000002C2 50                      	push    ax			
   454 000002C3 52                      	push	dx
   455 000002C4 E8B4FF                  	call 	plot_xy
   456 000002C7 89C2                    	mov 	dx,ax	
   457 000002C9 01CA                    	add	dx,cx       ;ponto extremo direita
   458 000002CB 52                      	push    dx			
   459 000002CC 53                      	push	bx
   460 000002CD E8ABFF                  	call	plot_xy
   461 000002D0 89C2                    	mov	dx,ax
   462 000002D2 29CA                    	sub	dx,cx       ;ponto extremo esquerda
   463 000002D4 52                      	push    dx			
   464 000002D5 53                      	push	bx
   465 000002D6 E8A2FF                  	call	plot_xy
   466 000002D9 89CF                    	mov	di,cx
   467 000002DB 81EF0100                	sub	di,1	 ;di=r-1
   468 000002DF BA0000                  	mov	dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   469                                  	
   470                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   471                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   472                                  ;valores positivos para d
   473                                  
   474                                  stay:				;loop
   475 000002E2 89FE                    	mov	si,di
   476 000002E4 81FE0000                	cmp	si,0
   477 000002E8 7F0E                    	jg	inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   478 000002EA 89D6                    	mov	si,dx		;o jl � importante porque trata-se de conta com sinal
   479 000002EC D1E6                    	sal	si,1		;multiplica por doi (shift arithmetic left)
   480 000002EE 81C60300                	add	si,3
   481 000002F2 01F7                    	add	di,si     ;nesse ponto d=d+2*dx+3
   482 000002F4 42                      	inc	dx		;incrementa dx
   483 000002F5 E90E00                  	jmp	plotar
   484                                  inf:	
   485 000002F8 89D6                    	mov	si,dx
   486 000002FA 29CE                    	sub	si,cx  		;faz x - y (dx-cx), e salva em di 
   487 000002FC D1E6                    	sal	si,1
   488 000002FE 81C60500                	add	si,5
   489 00000302 01F7                    	add	di,si		;nesse ponto d=d+2*(dx-cx)+5
   490 00000304 42                      	inc	dx		;incrementa x (dx)
   491 00000305 49                      	dec	cx		;decrementa y (cx)
   492                                  	
   493                                  plotar:	
   494 00000306 89D6                    	mov	si,dx
   495 00000308 01C6                    	add	si,ax
   496 0000030A 56                      	push    si			;coloca a abcisa x+xc na pilha
   497 0000030B 89CE                    	mov	si,cx
   498 0000030D 01DE                    	add	si,bx
   499 0000030F 56                      	push    si			;coloca a ordenada y+yc na pilha
   500 00000310 E868FF                  	call plot_xy		;toma conta do segundo octante
   501 00000313 89C6                    	mov	si,ax
   502 00000315 01D6                    	add	si,dx
   503 00000317 56                      	push    si			;coloca a abcisa xc+x na pilha
   504 00000318 89DE                    	mov	si,bx
   505 0000031A 29CE                    	sub	si,cx
   506 0000031C 56                      	push    si			;coloca a ordenada yc-y na pilha
   507 0000031D E85BFF                  	call plot_xy		;toma conta do s�timo octante
   508 00000320 89C6                    	mov	si,ax
   509 00000322 01CE                    	add	si,cx
   510 00000324 56                      	push    si			;coloca a abcisa xc+y na pilha
   511 00000325 89DE                    	mov	si,bx
   512 00000327 01D6                    	add	si,dx
   513 00000329 56                      	push    si			;coloca a ordenada yc+x na pilha
   514 0000032A E84EFF                  	call plot_xy		;toma conta do segundo octante
   515 0000032D 89C6                    	mov	si,ax
   516 0000032F 01CE                    	add	si,cx
   517 00000331 56                      	push    si			;coloca a abcisa xc+y na pilha
   518 00000332 89DE                    	mov	si,bx
   519 00000334 29D6                    	sub	si,dx
   520 00000336 56                      	push    si			;coloca a ordenada yc-x na pilha
   521 00000337 E841FF                  	call plot_xy		;toma conta do oitavo octante
   522 0000033A 89C6                    	mov	si,ax
   523 0000033C 29D6                    	sub	si,dx
   524 0000033E 56                      	push    si			;coloca a abcisa xc-x na pilha
   525 0000033F 89DE                    	mov	si,bx
   526 00000341 01CE                    	add	si,cx
   527 00000343 56                      	push    si			;coloca a ordenada yc+y na pilha
   528 00000344 E834FF                  	call plot_xy		;toma conta do terceiro octante
   529 00000347 89C6                    	mov	si,ax
   530 00000349 29D6                    	sub	si,dx
   531 0000034B 56                      	push    si			;coloca a abcisa xc-x na pilha
   532 0000034C 89DE                    	mov	si,bx
   533 0000034E 29CE                    	sub	si,cx
   534 00000350 56                      	push    si			;coloca a ordenada yc-y na pilha
   535 00000351 E827FF                  	call plot_xy		;toma conta do sexto octante
   536 00000354 89C6                    	mov	si,ax
   537 00000356 29CE                    	sub	si,cx
   538 00000358 56                      	push    si			;coloca a abcisa xc-y na pilha
   539 00000359 89DE                    	mov	si,bx
   540 0000035B 29D6                    	sub	si,dx
   541 0000035D 56                      	push    si			;coloca a ordenada yc-x na pilha
   542 0000035E E81AFF                  	call plot_xy		;toma conta do quinto octante
   543 00000361 89C6                    	mov	si,ax
   544 00000363 29CE                    	sub	si,cx
   545 00000365 56                      	push    si			;coloca a abcisa xc-y na pilha
   546 00000366 89DE                    	mov	si,bx
   547 00000368 01D6                    	add	si,dx
   548 0000036A 56                      	push    si			;coloca a ordenada yc-x na pilha
   549 0000036B E80DFF                  	call plot_xy		;toma conta do quarto octante
   550                                  	
   551 0000036E 39D1                    	cmp	cx,dx
   552 00000370 7203                    	jb	fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   553 00000372 E96DFF                  	jmp	stay		;se cx (y) est� acima de dx (x), continua no loop
   554                                  	
   555                                  	
   556                                  fim_circle:
   557 00000375 5F                      	pop	di
   558 00000376 5E                      	pop	si
   559 00000377 5A                      	pop	dx
   560 00000378 59                      	pop	cx
   561 00000379 5B                      	pop	bx
   562 0000037A 58                      	pop 	ax
   563 0000037B 9D                      	popf
   564 0000037C 5D                      	pop	bp
   565 0000037D C20600                  	ret	6
   566                                  ;-----------------------------------------------------------------------------
   567                                  ;    fun��o full_circle
   568                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   569                                  ; cor definida na variavel cor					  
   570                                  full_circle:
   571 00000380 55                      	push 	bp
   572 00000381 89E5                    	mov	 	bp,sp
   573 00000383 9C                      	pushf                        ;coloca os flags na pilha
   574 00000384 50                      	push 	ax
   575 00000385 53                      	push 	bx
   576 00000386 51                      	push	cx
   577 00000387 52                      	push	dx
   578 00000388 56                      	push	si
   579 00000389 57                      	push	di
   580                                  
   581 0000038A 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   582 0000038D 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   583 00000390 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   584                                  	
   585 00000393 89DE                    	mov		si,bx
   586 00000395 29CE                    	sub		si,cx
   587 00000397 50                      	push    ax			;coloca xc na pilha			
   588 00000398 56                      	push	si			;coloca yc-r na pilha
   589 00000399 89DE                    	mov		si,bx
   590 0000039B 01CE                    	add		si,cx
   591 0000039D 50                      	push	ax		;coloca xc na pilha
   592 0000039E 56                      	push	si		;coloca yc+r na pilha
   593 0000039F E89B00                  	call line
   594                                  	
   595                                  		
   596 000003A2 89CF                    	mov		di,cx
   597 000003A4 81EF0100                	sub		di,1	 ;di=r-1
   598 000003A8 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   599                                  	
   600                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   601                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   602                                  ;valores positivos para d
   603                                  
   604                                  stay_full:				;loop
   605 000003AB 89FE                    	mov		si,di
   606 000003AD 81FE0000                	cmp		si,0
   607 000003B1 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   608 000003B3 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   609 000003B5 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   610 000003B7 81C60300                	add		si,3
   611 000003BB 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   612 000003BD 42                      	inc		dx		;incrementa dx
   613 000003BE E90E00                  	jmp		plotar_full
   614                                  inf_full:	
   615 000003C1 89D6                    	mov		si,dx
   616 000003C3 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   617 000003C5 D1E6                    	sal		si,1
   618 000003C7 81C60500                	add		si,5
   619 000003CB 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   620 000003CD 42                      	inc		dx		;incrementa x (dx)
   621 000003CE 49                      	dec		cx		;decrementa y (cx)
   622                                  	
   623                                  plotar_full:	
   624 000003CF 89C6                    	mov		si,ax
   625 000003D1 01CE                    	add		si,cx
   626 000003D3 56                      	push	si		;coloca a abcisa y+xc na pilha			
   627 000003D4 89DE                    	mov		si,bx
   628 000003D6 29D6                    	sub		si,dx
   629 000003D8 56                      	push    si		;coloca a ordenada yc-x na pilha
   630 000003D9 89C6                    	mov		si,ax
   631 000003DB 01CE                    	add		si,cx
   632 000003DD 56                      	push	si		;coloca a abcisa y+xc na pilha	
   633 000003DE 89DE                    	mov		si,bx
   634 000003E0 01D6                    	add		si,dx
   635 000003E2 56                      	push    si		;coloca a ordenada yc+x na pilha	
   636 000003E3 E85700                  	call 	line
   637                                  	
   638 000003E6 89C6                    	mov		si,ax
   639 000003E8 01D6                    	add		si,dx
   640 000003EA 56                      	push	si		;coloca a abcisa xc+x na pilha			
   641 000003EB 89DE                    	mov		si,bx
   642 000003ED 29CE                    	sub		si,cx
   643 000003EF 56                      	push    si		;coloca a ordenada yc-y na pilha
   644 000003F0 89C6                    	mov		si,ax
   645 000003F2 01D6                    	add		si,dx
   646 000003F4 56                      	push	si		;coloca a abcisa xc+x na pilha	
   647 000003F5 89DE                    	mov		si,bx
   648 000003F7 01CE                    	add		si,cx
   649 000003F9 56                      	push    si		;coloca a ordenada yc+y na pilha	
   650 000003FA E84000                  	call	line
   651                                  	
   652 000003FD 89C6                    	mov		si,ax
   653 000003FF 29D6                    	sub		si,dx
   654 00000401 56                      	push	si		;coloca a abcisa xc-x na pilha			
   655 00000402 89DE                    	mov		si,bx
   656 00000404 29CE                    	sub		si,cx
   657 00000406 56                      	push    si		;coloca a ordenada yc-y na pilha
   658 00000407 89C6                    	mov		si,ax
   659 00000409 29D6                    	sub		si,dx
   660 0000040B 56                      	push	si		;coloca a abcisa xc-x na pilha	
   661 0000040C 89DE                    	mov		si,bx
   662 0000040E 01CE                    	add		si,cx
   663 00000410 56                      	push    si		;coloca a ordenada yc+y na pilha	
   664 00000411 E82900                  	call	line
   665                                  	
   666 00000414 89C6                    	mov		si,ax
   667 00000416 29CE                    	sub		si,cx
   668 00000418 56                      	push	si		;coloca a abcisa xc-y na pilha			
   669 00000419 89DE                    	mov		si,bx
   670 0000041B 29D6                    	sub		si,dx
   671 0000041D 56                      	push    si		;coloca a ordenada yc-x na pilha
   672 0000041E 89C6                    	mov		si,ax
   673 00000420 29CE                    	sub		si,cx
   674 00000422 56                      	push	si		;coloca a abcisa xc-y na pilha	
   675 00000423 89DE                    	mov		si,bx
   676 00000425 01D6                    	add		si,dx
   677 00000427 56                      	push    si		;coloca a ordenada yc+x na pilha	
   678 00000428 E81200                  	call	line
   679                                  	
   680 0000042B 39D1                    	cmp		cx,dx
   681 0000042D 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   682 0000042F E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   683                                  	
   684                                  	
   685                                  fim_full_circle:
   686 00000432 5F                      	pop		di
   687 00000433 5E                      	pop		si
   688 00000434 5A                      	pop		dx
   689 00000435 59                      	pop		cx
   690 00000436 5B                      	pop		bx
   691 00000437 58                      	pop		ax
   692 00000438 9D                      	popf
   693 00000439 5D                      	pop		bp
   694 0000043A C20600                  	ret		6
   695                                  ;-----------------------------------------------------------------------------
   696                                  ;
   697                                  ;   fun��o line
   698                                  ;
   699                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   700                                  line:
   701 0000043D 55                      	push		bp
   702 0000043E 89E5                    	mov		bp,sp
   703 00000440 9C                      	pushf                        ;coloca os flags na pilha
   704 00000441 50                      	push 		ax
   705 00000442 53                      	push 		bx
   706 00000443 51                      	push		cx
   707 00000444 52                      	push		dx
   708 00000445 56                      	push		si
   709 00000446 57                      	push		di
   710 00000447 8B460A                  	mov		ax,[bp+10]   ; resgata os valores das coordenadas
   711 0000044A 8B5E08                  	mov		bx,[bp+8]    ; resgata os valores das coordenadas
   712 0000044D 8B4E06                  	mov		cx,[bp+6]    ; resgata os valores das coordenadas
   713 00000450 8B5604                  	mov		dx,[bp+4]    ; resgata os valores das coordenadas
   714 00000453 39C8                    	cmp		ax,cx
   715 00000455 7408                    	je		line2
   716 00000457 721C                    	jb		line1
   717 00000459 91                      	xchg		ax,cx
   718 0000045A 87DA                    	xchg		bx,dx
   719 0000045C E91600                  	jmp		line1
   720                                  line2:		; deltax=0
   721 0000045F 39D3                    	cmp		bx,dx  ;subtrai dx de bx
   722 00000461 7202                    	jb		line3
   723 00000463 87DA                    	xchg		bx,dx        ;troca os valores de bx e dx entre eles
   724                                  line3:	; dx > bx
   725 00000465 50                      	push		ax
   726 00000466 53                      	push		bx
   727 00000467 E811FE                  	call 		plot_xy
   728 0000046A 39D3                    	cmp		bx,dx
   729 0000046C 7503                    	jne		line31
   730 0000046E E9C600                  	jmp		fim_line
   731 00000471 43                      line31:	inc		bx
   732 00000472 E9F0FF                  	jmp		line3
   733                                  ;deltax <>0
   734                                  line1:
   735                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   736                                  	; cx > ax
   737 00000475 51                      		push		cx
   738 00000476 29C1                    		sub		cx,ax
   739 00000478 890E[0600]              		mov		[deltax],cx
   740 0000047C 59                      		pop		cx
   741 0000047D 52                      		push		dx
   742 0000047E 29DA                    		sub		dx,bx
   743 00000480 7702                    		ja		line32
   744 00000482 F7DA                    		neg		dx
   745                                  line32:		
   746 00000484 8916[0800]              		mov		[deltay],dx
   747 00000488 5A                      		pop		dx
   748                                  
   749 00000489 50                      		push		ax
   750 0000048A A1[0600]                		mov		ax,[deltax]
   751 0000048D 3B06[0800]              		cmp		ax,[deltay]
   752 00000491 58                      		pop		ax
   753 00000492 724D                    		jb		line5
   754                                  
   755                                  	; cx > ax e deltax>deltay
   756 00000494 51                      		push		cx
   757 00000495 29C1                    		sub		cx,ax
   758 00000497 890E[0600]              		mov		[deltax],cx
   759 0000049B 59                      		pop		cx
   760 0000049C 52                      		push		dx
   761 0000049D 29DA                    		sub		dx,bx
   762 0000049F 8916[0800]              		mov		[deltay],dx
   763 000004A3 5A                      		pop		dx
   764                                  
   765 000004A4 89C6                    		mov		si,ax
   766                                  line4:
   767 000004A6 50                      		push		ax
   768 000004A7 52                      		push		dx
   769 000004A8 56                      		push		si
   770 000004A9 29C6                    		sub		si,ax	;(x-x1)
   771 000004AB A1[0800]                		mov		ax,[deltay]
   772 000004AE F7EE                    		imul		si
   773 000004B0 8B36[0600]              		mov		si,[deltax]		;arredondar
   774 000004B4 D1EE                    		shr		si,1
   775                                  ; se numerador (DX)>0 soma se <0 subtrai
   776 000004B6 81FA0000                		cmp		dx,0
   777 000004BA 7C09                    		jl		ar1
   778 000004BC 01F0                    		add		ax,si
   779 000004BE 81D20000                		adc		dx,0
   780 000004C2 E90600                  		jmp		arc1
   781 000004C5 29F0                    ar1:		sub		ax,si
   782 000004C7 81DA0000                		sbb		dx,0
   783                                  arc1:
   784 000004CB F73E[0600]              		idiv		word [deltax]
   785 000004CF 01D8                    		add		ax,bx
   786 000004D1 5E                      		pop		si
   787 000004D2 56                      		push		si
   788 000004D3 50                      		push		ax
   789 000004D4 E8A4FD                  		call		plot_xy
   790 000004D7 5A                      		pop		dx
   791 000004D8 58                      		pop		ax
   792 000004D9 39CE                    		cmp		si,cx
   793 000004DB 745A                    		je		fim_line
   794 000004DD 46                      		inc		si
   795 000004DE E9C5FF                  		jmp		line4
   796                                  
   797 000004E1 39D3                    line5:		cmp		bx,dx
   798 000004E3 7203                    		jb 		line7
   799 000004E5 91                      		xchg		ax,cx
   800 000004E6 87DA                    		xchg		bx,dx
   801                                  line7:
   802 000004E8 51                      	push cx
   803 000004E9 29C1                    	sub cx,ax
   804 000004EB 890E[0600]              	mov  [deltax],cx
   805 000004EF 59                      	pop  cx
   806 000004F0 52                      	push dx
   807 000004F1 29DA                    	sub dx,bx
   808 000004F3 8916[0800]              	mov [deltay],dx
   809 000004F7 5A                      	pop dx
   810 000004F8 89DE                    	mov si,bx
   811                                  line6:
   812 000004FA 52                      	push dx
   813 000004FB 56                      	push si
   814 000004FC 50                      	push ax
   815 000004FD 29DE                    	sub  si,bx	;(y-y1)
   816 000004FF A1[0600]                	mov  ax,[deltax]
   817 00000502 F7EE                    	imul si
   818 00000504 8B36[0800]              	mov  si,[deltay]		;arredondar
   819 00000508 D1EE                    	shr  si,1
   820                                  ; se numerador (DX)>0 soma se <0 subtrai
   821 0000050A 81FA0000                	cmp  dx,0
   822 0000050E 7C09                    	jl   ar2
   823 00000510 01F0                    	add  ax,si
   824 00000512 81D20000                	adc  dx,0
   825 00000516 E90600                  	jmp  arc2
   826                                  ar2:	
   827 00000519 29F0                    	sub ax, si
   828 0000051B 81DA0000                	sbb dx, 0
   829                                  arc2:
   830 0000051F F73E[0800]              	idiv word [deltay]
   831 00000523 89C7                    	mov di, ax
   832 00000525 58                      	pop ax
   833 00000526 01C7                    	add di, ax
   834 00000528 5E                      	pop si
   835 00000529 57                      	push di
   836 0000052A 56                      	push si
   837 0000052B E84DFD                  	call plot_xy
   838 0000052E 5A                      	pop dx
   839 0000052F 39D6                    	cmp si, dx
   840 00000531 7404                    	je  fim_line
   841 00000533 46                      	inc si
   842 00000534 E9C3FF                  	jmp line6
   843                                  
   844                                  fim_line:
   845 00000537 5F                      	pop di
   846 00000538 5E                      	pop si
   847 00000539 5A                      	pop dx
   848 0000053A 59                      	pop cx
   849 0000053B 5B                      	pop bx
   850 0000053C 58                      	pop ax
   851 0000053D 9D                      	popf
   852 0000053E 5D                      	pop bp
   853 0000053F C20800                  	ret 8
   854                                  ;*******************************************************************
   855                                  segment data
   856 00000000 0F                      cor      	db		branco_intenso
   857                                  ; I R G B COR
   858                                  ; 0 0 0 0 preto
   859                                  ; 0 0 0 1 azul
   860                                  ; 0 0 1 0 verde
   861                                  ; 0 0 1 1 cyan
   862                                  ; 0 1 0 0 vermelho
   863                                  ; 0 1 0 1 magenta
   864                                  ; 0 1 1 0 marrom
   865                                  ; 0 1 1 1 branco
   866                                  ; 1 0 0 0 cinza
   867                                  ; 1 0 0 1 azul claro
   868                                  ; 1 0 1 0 verde claro
   869                                  ; 1 0 1 1 cyan claro
   870                                  ; 1 1 0 0 rosa
   871                                  ; 1 1 0 1 magenta claro
   872                                  ; 1 1 1 0 amarelo
   873                                  ; 1 1 1 1 branco intenso
   874                                  
   875                                  preto		equ		0
   876                                  azul		equ		1
   877                                  verde		equ		2
   878                                  cyan		equ		3
   879                                  vermelho	equ		4
   880                                  magenta		equ		5
   881                                  marrom		equ		6
   882                                  branco		equ		7
   883                                  cinza		equ		8
   884                                  azul_claro	equ		9
   885                                  verde_claro	equ		10
   886                                  cyan_claro	equ		11
   887                                  rosa		equ		12
   888                                  magenta_claro	equ		13
   889                                  amarelo		equ		14
   890                                  branco_intenso	equ		15
   891                                  
   892 00000001 00                      modo_anterior	db		0
   893 00000002 0000                    linha   	dw  		0
   894 00000004 0000                    coluna  	dw  		0
   895 00000006 0000                    deltax		dw		0
   896 00000008 0000                    deltay		dw		0	
   897 0000000A 414252495224            abrir    	db  		'ABRIR$'
   898 00000010 5341495224              sair    	db  		'SAIR$'
   899 00000015 4849535424              hist    	db  		'HIST$'
   900 0000001A 48495354455124          eqhist    	db  		'HISTEQ$'
   901 00000021 484953544F4752414D-     txeqhist    	db  		'HISTOGRAMA ORIGINAL$'
   902 0000002A 41204F524947494E41-
   903 00000033 4C24               
   904 00000035 484953544F4752414D-     txhist    	db  		'HISTOGRAMA EQUALIZADO$'
   905 0000003E 4120455155414C495A-
   906 00000047 41444F24           
   907 0000004B 524F444F4C464F2056-     nome    	db  		'RODOLFO VALENTIM$'
   908 00000054 414C454E54494D24   
   909 0000005C 53495354454D415320-     disc    	db  		'SISTEMAS EMBARCADOS 2016/1$'
   910 00000065 454D4241524341444F-
   911 0000006E 5320323031362F3124 
   912 00000077 696D6167656D2E7478-     filename	db		'imagem.txt', 0
   913 00000080 7400               
   914 00000082 00                      buffer		db		0
   915 00000083 0000                    handle 		dw 		0
   916 00000085 00                      input		db		0
   917 00000086 0000<rept>              histogram:	times		256 dw 0
   918 00000286 0000<rept>              cfd:		times		256 dw 0
   919 00000486 25                      image:		db  		62501
   920                                  
   921                                  ;*************************************************************************
   922                                  segment stack stack
   923 00000000 <res 00000100>             		resb 		256
   924                                  stacktop:
   925                                  
   926                                  
